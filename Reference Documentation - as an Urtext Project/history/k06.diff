{"1632753726": "@@ -1,33815 +0,0 @@\n- %0A%0A# Urtextsssss %0AUsage Guide and References%0A%0A%0A%0A## About Urtext%0A%0A### Description%0A%0AUrtext is a syntax and interpreter for writing, connecting and organizing text.%0A%0AUrtext's basic unit is a %22node%22, which is a range or set of ranges of text within a file. A folder of nodes is a %22project%22. The Urtext interpreter is aware of all the nodes in a project at once, so nodes can reference, modify, and organize one another, across hundreds or thousands of files. The %7C Basic Syntax %3Eznj permits instructions embedded into the text itself. %0A%0AThe present interpreter for Urtext is in Python and can be used wherever Python 3.3 or later runs. Equivalent or variant interpreters could be created in any language or editing environment. %0A%0AUrtext has no built-in user interface; it only compiles and manages the files. Using Urtext requires an implementation within a text editor or text view, with a wrapper to pass messages between back and forth. Currently there is a package for Sublime Text (Mac/Windows/Linux) and a script for Pythonista (iOS).%0A%0A### Comparison To Other Tools%0A%0AUrtext shares some characteristics with markup languages such as Markdown and LaTeX, with the important difference that it is author-facing, rather than reader-facing. It is not primarily a document conversion or document generation tool, though it can export to some other formats (currently Markdown and HTML). %0A%0AUrtext's syntax combines content, structure and instructions all together. Unlike HTML or other markup languages, there is no additional code or markup %22behind%22 the visible syntax. Everything the interpreter reads is visible to the user.%0A%0A### Uses%0A%0AIncluding but not limited to:%0A%0A- prose writing%0A- research%0A- documentation%0A- knowledge/information base%0A- journaling%0A- Zettelkasten%0A- project/personal organization%0A- notetaking%0A- lightweight database%0A- any other writing or information management that can be done in text form%0A%0A### Features and Philosophy%0A%0A#### Plain Text%0A%0APlaintext is fast, human-readable, flexible, cross-platform, device-portable, and future-proof. It can be easily diffed and version-controlled (using Git, for example). Using theming and syntax highlighting, the text forms its own user interface without relying on graphic elements.%0A%0AIt can also incorporate (embed) other plaintext syntaxes, including other markup languages and other programming language syntaxes.%0A%0A#### Freeform, Flexible Syntax%0A%0AUrtext is like an inverse programming language. Whereas most programming languages provide a %22comment%22 syntax to insert freeform text around the code, Urtext works the opposite way: all content is text unless it matches syntax for structural or instructional code.%0A%0AText can be supplemented with user-defined metadata independent of the file system's metadata (datetime stamps, comments, etc.). It can even be used as a flat-file database.%0A%0ASimilar to code projects, an Urtext project can be spread across dozens or thousands of files, with individual files providing %22routes%22, or connections, to other other files or parts of files (nodes) via their node IDs. Text elements can be linked in tree-like, recursive (tangled), and other non-hierarchical ways.%0A%0AHowever, the basics are very simple, and you can use only the parts you need.%0A%0A#### Open source%0A%0A- Usable across multiple platforms and devices.%0A%0A- Decoupled from any particular text editor or interface ; it can be incorporated into any environment that runs Python, including any scriptable text editor or Python-scriptable environment capable of displaying a text editing view.%0A%0A#### Extensibile%0A%0AUrtext Actions, Directives, and ___ all inherit from base classes that can be user-extended to add or modify functionality limited only by the power of the Python language. %0A%0AAt present these features are undocumented, but can be understood if you know Python by reading the code.%0A%0A#### Future Proof%0A%0ANo reliance on anything that may not exist in 5 or 1000 years. %0A%0AThe interpreter/compiler could be implemented in any sufficiently capable language, current, past or future.%0A%0A#### Local%0A%0AThe Urtext parser is made primarily to operate on files present locally on the device. It is not dependent on a cloud or other subscription service. %0A%0ACloud services can be used to sync project files among devices if desired.%0A%0A#### Other Features%0A%0AUrtext is designed to make direct interaction with file system mostly unnecessary. Creating, naming, saving, and organizing files is handled for you.%0A%0A## About This Documentation%0A%0AThis is a documentation of Urtext written in Urtext.             was exported from the text files in this repository. Clone or download the repository to use it as both reference and example project. %0A%0AThis documentation is in active development. It may be incomplete or behind features/functionality of Urtext. Edits and revisions are encouraged in the form of issues and pull requests (https://github.com/nbeversl/urtext-docs/pulls, https://github.com/nbeversl/urtext-docs/issues).%0A%0AMany of the examples rely on syntax and formatting that are stripped out in export to Markdown. These are replaced with screenshots as necessary (see %7C Linking to Files and Other Resources %3E00q and %7C Exporting %3Eezg)%0A%0AInside an Urtext implementation, such as the Sublime Text with the Urtext package, you can navigate the project directly. Most of the key commands utilize Control-Shift as the modifier. %0A%0A- Control-Shift-/ to follow any link%0A- Control-Shift-H at any time to return to this %22home%22 node. %0A- View the readme: %5Breadme.md ;%5D(readme.md ;)%0A%0A## Quick Start, Guides and Examples %3Ez7t%0A  %E2%94%9C%E2%94%80%E2%94%80 Installation and Setup (Sublime Text / Desktop) %3E6cd%0A  %E2%94%9C%E2%94%80%E2%94%80 Basic Syntax %3Eznj%0A  %E2%94%94%E2%94%80%E2%94%80 Dynamic Definitions : Syntax and Parameters %3E87g%0AReference %3Eac5%0A  %E2%94%9C%E2%94%80%E2%94%80 Projects %3Edce%0A  %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Using/Adding Existing Files %3Erij%0A  %E2%94%9C%E2%94%80%E2%94%80 Nodes %3E01j%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Types of Nodes %3E07q%0A  %E2%94%82   %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 File Nodes %3Eekz%0A  %E2%94%82   %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Bracket Nodes %3E004%0A  %E2%94%82   %E2%94%82   %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Example Bracket Node %3Eywi%0A  %E2%94%82   %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Escaping Curly Brackets %3E8a8%0A  %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Compact Nodes %3Ekpz%0A  %E2%94%82   %E2%94%82       %E2%94%9C%E2%94%80%E2%94%80 Example Compact Node %3Ed7b%0A  %E2%94%82   %E2%94%82       %E2%94%94%E2%94%80%E2%94%80 Example inline node within compact node. %3E9up%0A  %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Node Titles %3Eue2%0A  %E2%94%9C%E2%94%80%E2%94%80 Dynamic Nodes %3Ek8p%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Dynamic Definitions %3E07u%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Lists %3Etwz%0A  %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Example: Nodes from the Documentation %3Em1r%0A  %E2%94%9C%E2%94%80%E2%94%80 Links and Pointers %3E00j%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Links %3E0y2%0A  %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Sublime Text tools to help with linking %3E00m%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Dynamic Titles %3E4vu%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Opening Links %3E01w%0A  %E2%94%82   %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Sublime %3Eosu%0A  %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Pythonista %3Eiy8%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Linking to Files and Other Resources %3E00q%0A  %E2%94%82   %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Web / HTTP(S) %3E00o%0A  %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Files %3E00p%0A  %E2%94%9C%E2%94%80%E2%94%80 Exporting %3Eezg%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Example : Urtext Documentation Exported in Markdown to a File %3Em9d%0A  %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Example : Fragment Exported to HTML %3Ebaq%0A  %E2%94%9C%E2%94%80%E2%94%80 File Naming %3E01m%0A  %E2%94%9C%E2%94%80%E2%94%80 History %3Eprp%0A  %E2%94%9C%E2%94%80%E2%94%80 This node now has special reserved metadata keys that will be parsed as follows: %3E00l%0A  %E2%94%9C%E2%94%80%E2%94%80 Errors and Warnings %3Ebpk%0A  %E2%94%9C%E2%94%80%E2%94%80 Using Multiple Projects %3Eipy%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Project Naming (Identification) %3Etgp%0A  %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Cross-Project Linking %3E7lx%0A  %E2%94%94%E2%94%80%E2%94%80 User Interface Elements %3E3n6%0A      %E2%94%9C%E2%94%80%E2%94%80 The Node Browser %3E01i%0A      %E2%94%94%E2%94%80%E2%94%80 Traverse Mode %3E00w%0A          %E2%94%94%E2%94%80%E2%94%80 Word Wrap in Traverse Mode %3Exci%0AAbout This Documentation %3Ep23%0A((%3Ea5m:86))%0A%0A## Quick Start, Guides and Examples%0A%0A%0A### Installation and Setup (Sublime Text / Desktop)%0A%0AFor desktop use (PC/Mac/Linux) Urtext is implemented in Sublime Text.%0A%0A1. Download Sublime Text. (https://www.sublimetext.com/).%0A%0A2. Download Urtext and all its dependencies from the monorepo at                                          . You can either download this repository as a .ZIP file and unzip it, or if you want to maintain version control, use                                                                         . Put the contents of the cloned/unzipped folder (important: not the folder itself) directly into your                                folder.%0A%0A3. Download the Sublime Urtext package at                                             . Place it in your Packages folder (Sublime Text 3/Packages)%0A%0A4. Clone/download this documentation repository and open its folder in Sublime. It will automatically be read as an Urtext project.%0A%0AOnce the Sublime package is installed, it will always look for any files with the .txt extension in open folders and attempt to compile them into a project. To open an existing Urtext project, open the folder, a file in the folder, or a Sublime project that includes the folder, and any feature described in this documentation will work.%0A%0ATo make a new project, open an empty folder and select Select                               from the Sublime Command Palette. For more information, see %7C Projects %3Edce.%0A%0A%0A### Basic Syntax%0A%0AAll text is plain content unless inside a timestamp wrapper, dynamic definition wrapper, or preceded by a metadata assignment operator and keyname.%0A%0A%0ABracket Node Wrappers. Can appear anywhere. Can be nested aribrarily deep.%0AMore information: %7C Bracket Nodes %3E004%0A%0A%0ANode Link. Links to the specified node by ID, like a hyperlink. %0AMore information: %7C Links %3E0y2%0A%0A%0ANode Pointer: Embeds the specified node as though it were included bracket using wrappers       (see above)%0AMore information: %5B MISSING LINK : lmu %5D %0A%0A%0ATitle Pipe. Placed immediately before a node link or node pointer (whitespace is ok), dynamically populates the linked node title.%0AExample and more info: %7C Dynamic Titles %3E4vu%0A%0A%0ABullet Node marker. Must be the first non-whitespace character on a line. Must include an ID in order to parse as a node.%0AMore information: %7C Bullet Nodes %3Ej6t%0A%0A%0ATimestamp wrapper. Parses user-defined datetime strings, with many default formats built in.%0AThe first character inside the brackets may not be    , '-', or whitespace.%0AExample: %0AMore information: %7C Syntax and Format %3E005%0A%0A%0AMetadata assignment operator. Accepts a user-defined key on the left, and values and timestamps on the right.%0AMetadata may appear anywhere. They attach to their containing (parent) node, remember their exact location, and can serve as anchors/bookmarks to context. Keys must be single words (underscore permitted), values may be any characters, terminated with a semicolon or newline. The pipe character (   ) separates multiple values for a single key.%0AExample:%0A%0A%0A### Dynamic Definitions : Syntax and Parameters%0A%0ADynamic definitions are instructions for dynamically building nodes from other nodes. Definitions can be written anywhere; it is not necessary to store a definition in the same file to which it refers. (Definitions cannot, however, be stored in the node they target, since they would overwrite themselves.)%0A%0ADynamic definitions are wrapped with double left and right square brackets(    ,    ). There are no restrictions on spacing, indentation, newlines, or other arbitrary text or whitespace. The order of parameters within a definition is unimportant; they are evaluated as a group.%0A%0AThis dynamic definition below is for documentation and does not actually do anything. It rather lists every parameter along with an explanation of its use and purpose. For example uses, see %7C Dynamic Nodes %3Ek8p%0A%0A%0A%5B%5B %09ID() %09%09%09Target node to dynamically populate with output.%0AAccepts a link to a node %5B MISSING LINK : eee %5D )%0A%0AINCLUDE()  %09%09Nodes to include. Accepts one or more key/value pairs and optional parameters.%0Aor +()%0AComparisons:%0A%0Ameans equal to%0AINCLUDE(key = value)%09%0AIncludes all nodes with the given key containing the given value%0A%0Ameans %22contains%22%0AINCLUDE(_contents ? some text or content)%0AIncludes all nodes containing %22some text or content%22 in their text contents.%0A(See also -search)%0A%0Ameans %22anything%22%0AINCLUDE(index = *)%0AIncludes all nodes containing the key        %0A%0AUse semicolon or newline to separate entries, as everywhere in Urtext.%0A%0AAdditional Flags:%0A%0AAdditional flags can be included in %0A%0AINCLUDE(*) or +(*)%0AIncludes all nodes in the project%09%09%09%09%09%09%09%09%09%0A%0Aor     %0AINCLUDE(-all_projects) or +(*p)%0AExpands included nodes to include all projects in the project list.%0A%0A%0AIncludes all nodes that contain only whitespace as their content%0A%0ANote these additional flags substitute for semicolons/newlines as separators between entries.%0A%0ASystem keys%0A%0AUrtext includes some built-in keys whose values are generated automatically. %0AThese may also be used in INCLUDE(): %0A%0A%0AINCLUDE(_links_to = 46d)%0AIncludes all nodes that contain links to node ID      %0A%0A%0AINCLUDE(_links_from = 46d)%0AIncludes all nodes to which node ID       links%0A%0A: Refers to a node's text contents. %0ACan be used, for instance, for full text search or comparison.%0AINCLUDE(_contents ? Western Civilization)%0AIncludes any node that contents the text %22Western Civilization%22%0A(comparisons are case-insensitive)%0A%0AEXCLUDE()%09%09Accepts all the same parameters as INCLUDE()%0Aor -()%09%09%09Always evaluated after INCLUDE(), excludes the specified nodes from the result.%0A%0A%0A%0ASORT()%09%09%09Sorts the results. Entries can be keynames (include system-defined ones, see below)%0Aor flags, with multiple keys separated by semicolon or newline.%0A%0ASORT(%0A%0A%5B key name %5D%09%09Sorts by the value of the given key. Default is alphabetical.%0A%0A-num or -n  %09%09Sorts the results numerically if possible.%0AThe default sort is alphabetical.%0A%0A-timestamp or -t  %09Sort by timestamp%0A%0A-reverse or -r %09%09Reverses the sort order. Applicable to any of the above.%0A%0A)%0A%0ANote that system-assigned keys are also available:%0A%0A%0A%0A%0AExample:%0ASORT(title -reverse)%0A%0ALIMIT()%09%09%09Limits the output to the specified number of results.%0ALimit is applied after SORT().%0A%0AExample:%0ALIMIT(30)%0AWill only show 30 results of nodes with the specified INCLUDE()/EXCLUDE() parameters.%0A%0A%0ALIST()%09%09%09This is the default output if no other is specified. %0AIt outputs a list of (unique) nodes specified by the combination of INCLUDE() with EXCLUDE(). %0ATo see instead a tree representation of each node and its descendants, if any, provide a level of depth as%0Aa parameter. Example: LIST(5). %0A%0ATo show unlimited depth (until recursion, if it occurs), use the asterisk: LIST(*)%0A%0ACOLLECT()%09%09Aggregates occurrences of metadata, including timestamps, and surrounding contents.%0AAccepts key/value pais %0AReturns a seperate item for each occurence.%0A%0AExample:%0ACOLLECT(timestamp=*)%0A%0A%0ASHOW()%09%09%09Supplies a template for the output of each result. %0AAccepts keynames, denoted with    , arbitrary text, and Unicode characters including %5Cn, %5Cr, %5Ct.%0A%0AWords preceded by     are are evaluated as metadata keys, replaced in the output by their value(s).%0ANote that key names themselves are not displayed in the output. Add keynames manually if you want them included.%0A%0AExample:%0ASHOW(Author: $author, Date: $date%5Cn)%0A%0AIn addition to all user-defined metadata keys, the following tokens are included:%0A%0ASHOW(%0A%0A$title %0ADisplays the node title, default or via the         meta key%0A%0A$link%0ADisplays a link to the node%0A%0A$date %0ADisplays the node's date in the project's default timestamp format%0A%0A$meta%0AShorthand to show all metadata for every node, formatted as by %22consolidate metadata%22%0A%0A$contents:120%0ADisplays the contents of the node. Optional excerpt/length specifier after the colon%0A)%0A%0AHEADER()%09%09Adds additional arbitrary/freeform text to the beginning of the output. This can include any syntax %0Avalid inside Urtext nodes, including metadata.%0A%0AFOOTER()%09%09Adds additional arbitrary/freeform text to the end of the output. Same as for HEADER().%0A%0AMARKDOWN()%09%09Outputs a Markdown representaion of the node(s) into another node or into an external file.%0AWill include all hierarchically nested nodes using Markdown heading format.%0ASee FORMAT() for ways to preformat the output.%0A%0AAccepts one or more semicolon- or newline-separated links to nodes or files (see %7C Linking to outside %0Aresources %3E00q)%0A%0ATo include all nodes pointed to from the root file, recursively, use the flag:%0A%0A%0AHTML()%09%09%09As for MARKDOWN(), but outputs as HTML.%0A%0APLAINTEXT()%09%09As for MARKDOWN(), but outputs Plaintext (Urtext syntax stripped out, %0Aincluding metadata and dynamic definitions.)%0A%0ACan be used, for instance, to export a node or nodes to a non-Urtext text file.%0A%0AFORMAT()%09%09Specificies additional global formatting of the output. There are intended primarily for formatting %0Aexported text, but can be applied to any output. Accepts one or more predefined flags:%0A%0A-preformat or -pre%0AWraps preformatted text (trees, etc.) in backticks to preserve preformatting, %0Afor instance, for Markdown contenxts.%0A%0A-multiline_meta or -mm%0APlaces dynamic node metadata on separate lines instead of separated by;%0A%0A-indent: or -i%0AIndents the dynamic node by the number of spaces specified in parentheses.%0AExample: FORMAT(-indent:20)%0A%0A%5D%5D%0A%7C Sublime Text Key Bindings and Operations %3E1vs%0A%0A## Reference%0A%0A%0A### Projects%0A%0AAn Urtext project is a single folder. The folder must contain at least file with an Urtext Node ID.%0A%0ATo make an new empty project:%0A%0A- make a new folder and open the folder in Sublime Text. %0A- Select Urtext : Initialize Project from the Sublime Command Palette. %0A- The folder how has one Urtext file and a           folder for tracking edits. (See %7C History %3Eprp )%0A%0A#### Using/Adding Existing Files%0A%0AOnce a folder contains at least one file with a node ID, you can add and use existing plaintext files in the project without any modification. However for most of the benefits of Urtext you must minimally an ID (%7C Node IDs %3E01q) in each file.%0A%0ATo do so, select                           from the Sublime Command palette.%0A%0ANote the append will occur without a confirmation dialog, so if you are just experimenting with this system, consider making a copy of your file folder so you can revert without having to manually remove the metadata.%0A%0A%0A### Nodes%0A%0AA node is region, or set of regions, of a file, up to and including the entire file. %0AA file is itself a node. %0AAll nodes can contain other nodes.%0A%0AThe identity of an Urtext node persists no matter its containing filename. This is accomplished by assigning each node a three-character identifier using alpha-numeric characters, providing over 46,000 possible nodes per project. See %7C Node IDs %3E01q for more information.%0A%0AUrtext generates IDs automatically on creation of new nodes. ID's can be changed without affecting functionality, though links must then be manually updated as well. %0A%0AIt is possible to use files containing no IDs in an Urtext project, but then most of the features of Urtext are lost.%0A%0A#### Types of Nodes%0A%0A%0A%0A##### File Nodes%0A%0AThe most basic node is a single file. It may or may not contain other nodes nested inside it.%0A%0ATo create a new file-level node: %7C New Node: ctrl + shift + ; %3Eve3. A new file is created and named automatically. It contains a single node ID and (by default) a creation timestamp.%0A%0A%0A##### Bracket Nodes                                                       %0A%0ANodes can be nested arbitrarily deep inside other nodes, whether the parent node is a file or another bracket node. For all purposes in Urtext, bracket nodes' identities are unique from their containing files, parent nodes, and child nodes.   %0A%0AThe syntax for bracket nodes is to wrap the content in curly braces:%0A%0A###### Example Bracket NodeCreate an bracket nodes with %7C Insert Inline Node: %3Erzx. Inside the inserted double curly braces is a new node with an auto-generated ID.   %0A%0ATo wrap existing content into an bracket node, first select the content and use the same keypress.%0A%0AWhen syntax highlighting is active, bracket node wrappers are tinted to showing nesting level:%0A%0A###### Example first level%0A%0A####### second level%0A%0A######## third test level%0A%0A######### fourth level%0A%0A########## fifth level(The following metadata excludes this example from the Table of Contents tree. See %5B MISSING LINK : v7r %5D  for information)(For Markdown export, a screenshot is provided showing indentation and highlighting:) %5B./files/node-nesting-example.png%5D(./files/node-nesting-example.png)%0A%0ANote that every opening curly bracket must be closed in the same file. Every node requires an ID between its opening and closing brackets. Nodes at the file level (%7C File Nodes %3Eekz) do not use curly-braces, as their region boundaries are the file itself.%0A%0A###### Escaping Curly Brackets%0A%0AIf you need to use curly brackets in your text, you can escape the Urtext syntax by preceding the bracket with a backward slash; this will prevent them from being parsed: %5C%7B %5C%7D%0A%0ATo ignore syntax elements more globally, and/or to embed other syntaxes that use Urtext characters, such as JSON, PHP, and JavaScript, see %5B MISSING LINK : oy5 %5D %0A%0A%0A##### Compact Nodes%0A%0AKey: %7C Insert Compact Node: %3E1qq%0A%0AFor text content requiring only a single line, such as list items, very short notes and similar, use the caret character (   ) as the first non-whitesoace character on a new line. This defines a new node as a child of the node in which the character appears, with the closing wrapper being the end of the same line. %0A%0ALike all nodes, a compact node requires an ID. Like all nodes, it can contain metadata and even inline nodes, as long as the entire contents, including wrappers and metadata, are contained on a single line. (Note that %22line%22 in this case refers to consecutive characters between explicit line breaks, and not to lines in the editor, which may be arbitrarily wrapped.)%0A%0A###### Example Compact Node%0A%0A####### Example inline node within compact node.%5B./files/example-compact-node.png%5D(./files/example-compact-node.png)%0A%0A#### Node Titles%0A%0ABy default, the full first non-whitespace line of any node is the node's title. This can be overridden using the         metadata key or by following the desired text with the underscore (   ) character as used in this document.%0A%0A%0A### Dynamic Nodes%0A%0ADynamic nodes contain content aggregated from the contents of other nodes. Dynamic content stays up to date with its source content %22dynamically%22 (on file save). A dynamic node can be seen as a %22view into%22 other content.%0A%0A#### Dynamic Definitions%0A%0ADynamic nodes are created using a Dynamic Definition. Dynamic Definitions are specified with double square brackets , and have there own syntax, including scoping and highlighting. Dynamic definitions can query, sort, filter, and format the output of nodes in a variety of ways, making them adaptable to many purposes. This section illustrates some example uses of dynamic nodes. It will be helpful to reference %7C Dynamic Definitions : Syntax and Parameters %3E87g.%0A%0ADynamic Definitions can be written anywhere; it is not necessary to store the definition in the same file to which it refers. (Note that they cannot, however, be stored in the node they target, since they would overwrite themselves.)%0A%0AThe key %7C Insert Dynamic Definition with Node:                    %3Ejsc creates a new dynamic definition in Sublime, auto-populated with a corresponding empty inline node. You can also write a definition manually, providing the ID of an existing node. For example, if you want the contents to replace an existing node, assign this key the value of that node's ID. If you want it to populate new inline node, create that node and then copy/paste its ID. Note that Dynamic Definitions do not create their target nodes automatically ; the target node must exist, or the definition will have no effect.There are two main kinds of dynamic output, Lists and Collections:%0A%0A%22Lists%22 are lists of nodes, with each node displayed not more than once. Lists can optionally expand into trees, showing the hierarchy of nested relationships from each root node in the list.%0A%0A%0A%0A#### Lists%0A%0A##### Example: Nodes from the Documentation%0A%0Aproject_settings %3E8p4%0ATemplating the Output with the SHOW parameter %3E8p5%0AGenerated automatically in a dynamic node, contains a link to the node containing the definition. %3E5cq%0AList Projects: %3Eg5a%0ATimestamps %3E2i4%0ALinks %3E0y2%0ABasic Syntax %3Eznj%0AInsert Dynamic Definition with Node: %3Ejsc%0AFull Text Search %3E4p9%0AHome Node: %3E5ab%0ACopy Link to this Node With Title: %3E05x%0ANodes Excluded from the Table of Contents %3Ejkl%0ACopy Link to this Node: %3Evel%0AComparison To Other Tools %3Eh8z%0AToggle History Traverse: %3Endc%0ANew Node: ctrl + shift + ; %3Eve3%0ADynamic Definitions : Syntax and Parameters %3E87g%0AExample Bracket Node %3Eywi%0ATime Zones %3E7w6%0ACase-sensitivity %3El36%0A((%3Etwz:7))%5B./files/example-list-1-definition.png%5D(./files/example-list-1-definition.png)%0A%5B./files/example-list-1.png%5D(./files/example-list-1.png)%0A%0ANote that the at the bottom of the node is the reserved key       which refers to the node containing the definition.%0A%0ALists can be expanded into trees that show the outline of many nodes across many files at any specified depth, up to. In fact, a list is a tree with depth 1.%0A%0A%7C Trees %3E%3Ew8u%0A%0A%22Collections%22 aggregate metadata entries with their context; the same node may appear many times in a collection if it contains many metadata entries matching the queried parameters.%0A%0A%7C Collections %3E%3E00k%0A%0A%0A### Links and Pointers%0A%0A#### Links %0A%0ATo make a %22hyperlink%22 from one node to another, use the right angle bracket (%3E) followed immediately by a node ID. Linking does not require a filename or any other information, only the node ID. Any other surrounding text is ignored.%0A%0A##### Sublime Text tools to help with linking %0A%0A%0ATwo Sublime Command Palette commands can make linking quick and easy:%0A%0AUrtext : Link To ...%0ALinks from the currently viewed node to another node which you can select in the selection panel. When you select a node in the quick panel, a link to that node will be inserted at the cursor.%0A%0AUrtext: Link From ...%0ALinks TO the current node FROM another node. When you select this command, a link to the current node will be copied to the clipboard. You can then paste the reference into the node you open in the quick panel.%0A%0A#### Dynamic Titles%0A%0APrepending a pipe character to any node link will populate the space between the pipe and link with the node's title, from its metadata or default title. Examples are found throughout this documentation. Titled links are updated at the single file level whenever the file is saved.%0A%0A#### Opening Links%0A%0A##### Sublime%0AKey : %7C Open Urtext Link: %3Engh on a line containing a link to open the node with the linked ID. If the link is to an inline node, Sublime will scroll to and center its starting point.%0A%0A##### Pythonista %0A%0AUse the     botton when the cursor is on any line containing a link.Note that Urtext reads node regions on every save, so cursor location may be imprecise if the file has been altered since the last save.%0A%0A#### Linking to Files and Other Resources%0A%0A##### Web / HTTP(S)%0A%0AHTTP(S) links are recognized automatically and will open in the default browser.    %0AExample: pressing %7C Open Urtext Link: %3Engh on this line will open the link: http://github.com%0A%0A##### Files%0A%0ALinks to files can be made by writing     , followed immediately with a file path relative to the folder of the project:%0AExample: %5BREADME.md%5D(README.md)%0A%7C  ?  %3E%3Elmu%0A%0A%0A### Exporting%0AUrtext can export to plaintext, Markdown and HTML. Output can be written to a file or back into another node in the project. Exporting is dynamic; when changes are made to the source files, exports are immediately updated.%0A%0A#### Example : Urtext Documentation Exported in Markdown to a File%0A%0AThis dynamic definition exports the entire documentation from its root node %7C Urtext  Version: 1.0-alpha  Usage Guide and References %3Ea5m ) in Markdown format to a file called %5B./README.md:%5D(./README.md:)%0A%0A%0A%5B MISSING LINK : l0i %5D %0A%0A#### Example : Fragment Exported to HTML%0A%0AThe following Dynamic Definition is identical to the above, except it exports to HTML.%0A%0A%0A### File Naming                                                                                %0A%0ASince node identities are independent of their filenames, you can use any naming convention you want. Urtext can also rename files automatically in convenient formats based on their title and/or index. Renaming by index is useful, for instance, if you want file-level nodes easily readable inside a file system, mobile app, or other file browser.%0A%0ATo rename a file, select %22Rename File from Meta%22 from the command palette (Command-P). This will rename the file in one of the following schema:%0A%0AIf an index is present:%0A%0A.txt%0A%0AIf no index is present:%0A%0A.txt%0A%0AThis system preserves automatic numerical sorting within the filesystem, such that the most recent un-indexed nodes appear first. If you want to use another system, such as putting the title first, you can do so.%0A%0A%0A### History%0A%0AThough use of powerful version control tools (such as Git, Mercurial, etc.) is possible, Urtext has a lighter built-in versioning system that tracks edits at intervals. It is not necessary to make explicit %22commits%22 in order to utilize this. Urtext creates a single, linear history of each file's content, with each snapshot being a %22diff%22, or record of changes, since the previous snapshot. When a previous state is restored, no %22checkout%22 or %22rewind%22 occurs; rather, the newly restored state is appended to the history. Therefore, in addition to functioning as version control, the feature can also be used as an infinite and non-destructive %22undo/redo%22 editing history that saves state when the file is closed. The default interval is 10 seconds, and can be modified in project_settings. %0A%0ATo access a file's history, use %7C Toggle History Traverse: %3Endc.%0A%0AHistories are stored in the /history folder inside the project, as .pkl (%22pickle%22) files. This folder requires no user involvement. If using another version control tool such as Git, you may wish to add the /history folder to your .gitignore file, so that only explicitly committed versions of your project are visible in distributed repositories.%0A%0A%0A### This node now has special reserved metadata keys that will be parsed as follows:%0Aimestamp%0A%0A%0A### Errors and Warnings%0A%0A%0A### Using Multiple Projects%0A%0ATo use multiple projects at once, there is a project context manager. When you initially pass a path to Urtext, it looks recursively in all sub folders for additional projects. If it finds a compilable Urtext project in any one, it adds these to the context manager.  You can then freely switch among projects, either explicitly, or using links between the projects (described below). When switching projects, all Urtext's features, content and behavior, including links, compiling, and all functions linked to UI buttons, will operate in the context of the selected project. %0A%0AYou can put all your Urtext projects into sub folders of a single path. Alternatively, you may put them anyplace in the file system and choose as your Urtext root a folder that encompasses them all. Compiling may take longer if Urtext has to search through many unused directories. %0A%0AUsing Python, it is possible to only instantiate a single project, without the context manager. The current implementations in Sublime and Pythonista, however, use the context manager by default, even if you are only using a single project.%0A%0ARecall that what defines a project is a folder. This is also what separates it from other projects. If you add other Urtext project folders into the initial path, they will all be accessible from the same project list.%0A%0ATo switch between projects in Sublime, select Urtext: Select Project from the command palette.%0AIn Pythonista, use %22Switch Projects%22 from the feature menu.%0A%0A#### Project Naming (Identification)%0A%0AUnlike nodes, projects are uniquely identified by name. For this reason, each project must have an unique name within the running instance of Urtext. Projects can be named using the project_title key in the project's project_settings node. If no name is present, the project's name becomes its absolute path in the file system.%0A%0A#### Cross-Project Linking%0A%0AYou may also link from one project to another within the text. To so this, use the following syntax:%0A%0A=%3E%22name or path of the other project%5B MISSING LINK : idj %5D %0A(This link is only an example and is non-functioning)%0A%0AFollowing this link will change the project context to the named project and open its specified node.%0A%0A%0A### User Interface Elements%0A%0AUrtext is made to require minimal user interface elements. They mostly serve as conveniences that duplicate %0A%0A%0A%0A#### The Node Browser%0A%0AThe Node browser shows a list of all nodes in the project. It can be implemented in plaintext using a dynamic definition such as: . However, %0A%0Aalso be implemented %0A%0AOpening the Node List%0A%0ACtrl-Shift-E %0A%0A%0A%0A%0AIn Sublime Text there is also the alternative of using the UI dropdown. Press Control-Shift-E or select %22Urtext: Node List%22 from the Sublime command palette (Shift-Super-P). Here you can find a node by typing part of its title.%0A%0AIn the Node List, nodes are sorted by their time of creation, with most recent first. They can also be sorted by index (see %7C  ?  %3E00z).%0A%0A%0A#### Traverse Mode   %0A%0A%0A%0AThis feature is currently implemented in Sublime Text only.%0A%0AYou can navigate a node tree or list of nodes by turning on Traverse mode (Shift-Ctrl-R). This will open another pane next to the one you are currently in. As you navigate the nodeview in the left side with the cursor or mouse, the selected node shows on the right. Use Sublime's Focus Group navigation keys, or the mouse, to switch between left and right panes.%0A%0AToggle Traverse Mode off by pressing Shift-Ctrl-R again. The status bar at the bottom of the Sublime window indicates whether Traverse is on or off. %0A%0ANote that if Traverse mode is off, you can also open a link manually (Shift-Ctrl-/) as normal. %0A%0AThis feature is not built into Urtext; it is a feature of the Sublime package only.%0A%0A##### Word Wrap in Traverse Mode%0A%0ASince Traverse Mode splits the window into two or more panes, it is suggested to set Word Wrap Column to %22Auto%22 in Sublime Settings. This will cause the edited views to wrap correctly no matter the screen or window/pane size, as well as in Sublime's Distraction Free Mode.%0A%0AWhenever Traverse Mode is enabled on a view, word wrap for that view is turned off altogether to prevent awkward wrapping of trees. It is restored when Traverse Mode is turned off.ss((%3Ea5m:186)) @k06\n", "1632753684": " \n\n# Urtextsssss \nUsage Guide and References\n\n\n\n## About Urtext\n\n### Description\n\nUrtext is a syntax and interpreter for writing, connecting and organizing text.\n\nUrtext's basic unit is a \"node\", which is a range or set of ranges of text within a file. A folder of nodes is a \"project\". The Urtext interpreter is aware of all the nodes in a project at once, so nodes can reference, modify, and organize one another, across hundreds or thousands of files. The | Basic Syntax >znj permits instructions embedded into the text itself. \n\nThe present interpreter for Urtext is in Python and can be used wherever Python 3.3 or later runs. Equivalent or variant interpreters could be created in any language or editing environment. \n\nUrtext has no built-in user interface; it only compiles and manages the files. Using Urtext requires an implementation within a text editor or text view, with a wrapper to pass messages between back and forth. Currently there is a package for Sublime Text (Mac/Windows/Linux) and a script for Pythonista (iOS).\n\n### Comparison To Other Tools\n\nUrtext shares some characteristics with markup languages such as Markdown and LaTeX, with the important difference that it is author-facing, rather than reader-facing. It is not primarily a document conversion or document generation tool, though it can export to some other formats (currently Markdown and HTML). \n\nUrtext's syntax combines content, structure and instructions all together. Unlike HTML or other markup languages, there is no additional code or markup \"behind\" the visible syntax. Everything the interpreter reads is visible to the user.\n\n### Uses\n\nIncluding but not limited to:\n\n- prose writing\n- research\n- documentation\n- knowledge/information base\n- journaling\n- Zettelkasten\n- project/personal organization\n- notetaking\n- lightweight database\n- any other writing or information management that can be done in text form\n\n### Features and Philosophy\n\n#### Plain Text\n\nPlaintext is fast, human-readable, flexible, cross-platform, device-portable, and future-proof. It can be easily diffed and version-controlled (using Git, for example). Using theming and syntax highlighting, the text forms its own user interface without relying on graphic elements.\n\nIt can also incorporate (embed) other plaintext syntaxes, including other markup languages and other programming language syntaxes.\n\n#### Freeform, Flexible Syntax\n\nUrtext is like an inverse programming language. Whereas most programming languages provide a \"comment\" syntax to insert freeform text around the code, Urtext works the opposite way: all content is text unless it matches syntax for structural or instructional code.\n\nText can be supplemented with user-defined metadata independent of the file system's metadata (datetime stamps, comments, etc.). It can even be used as a flat-file database.\n\nSimilar to code projects, an Urtext project can be spread across dozens or thousands of files, with individual files providing \"routes\", or connections, to other other files or parts of files (nodes) via their node IDs. Text elements can be linked in tree-like, recursive (tangled), and other non-hierarchical ways.\n\nHowever, the basics are very simple, and you can use only the parts you need.\n\n#### Open source\n\n- Usable across multiple platforms and devices.\n\n- Decoupled from any particular text editor or interface ; it can be incorporated into any environment that runs Python, including any scriptable text editor or Python-scriptable environment capable of displaying a text editing view.\n\n#### Extensibile\n\nUrtext Actions, Directives, and ___ all inherit from base classes that can be user-extended to add or modify functionality limited only by the power of the Python language. \n\nAt present these features are undocumented, but can be understood if you know Python by reading the code.\n\n#### Future Proof\n\nNo reliance on anything that may not exist in 5 or 1000 years. \n\nThe interpreter/compiler could be implemented in any sufficiently capable language, current, past or future.\n\n#### Local\n\nThe Urtext parser is made primarily to operate on files present locally on the device. It is not dependent on a cloud or other subscription service. \n\nCloud services can be used to sync project files among devices if desired.\n\n#### Other Features\n\nUrtext is designed to make direct interaction with file system mostly unnecessary. Creating, naming, saving, and organizing files is handled for you.\n\n## About This Documentation\n\nThis is a documentation of Urtext written in Urtext.             was exported from the text files in this repository. Clone or download the repository to use it as both reference and example project. \n\nThis documentation is in active development. It may be incomplete or behind features/functionality of Urtext. Edits and revisions are encouraged in the form of issues and pull requests (https://github.com/nbeversl/urtext-docs/pulls, https://github.com/nbeversl/urtext-docs/issues).\n\nMany of the examples rely on syntax and formatting that are stripped out in export to Markdown. These are replaced with screenshots as necessary (see | Linking to Files and Other Resources >00q and | Exporting >ezg)\n\nInside an Urtext implementation, such as the Sublime Text with the Urtext package, you can navigate the project directly. Most of the key commands utilize Control-Shift as the modifier. \n\n- Control-Shift-/ to follow any link\n- Control-Shift-H at any time to return to this \"home\" node. \n- View the readme: [readme.md ;](readme.md ;)\n\n## Quick Start, Guides and Examples >z7t\n  \u251c\u2500\u2500 Installation and Setup (Sublime Text / Desktop) >6cd\n  \u251c\u2500\u2500 Basic Syntax >znj\n  \u2514\u2500\u2500 Dynamic Definitions : Syntax and Parameters >87g\nReference >ac5\n  \u251c\u2500\u2500 Projects >dce\n  \u2502   \u2514\u2500\u2500 Using/Adding Existing Files >rij\n  \u251c\u2500\u2500 Nodes >01j\n  \u2502   \u251c\u2500\u2500 Types of Nodes >07q\n  \u2502   \u2502   \u251c\u2500\u2500 File Nodes >ekz\n  \u2502   \u2502   \u251c\u2500\u2500 Bracket Nodes >004\n  \u2502   \u2502   \u2502   \u251c\u2500\u2500 Example Bracket Node >ywi\n  \u2502   \u2502   \u2502   \u2514\u2500\u2500 Escaping Curly Brackets >8a8\n  \u2502   \u2502   \u2514\u2500\u2500 Compact Nodes >kpz\n  \u2502   \u2502       \u251c\u2500\u2500 Example Compact Node >d7b\n  \u2502   \u2502       \u2514\u2500\u2500 Example inline node within compact node. >9up\n  \u2502   \u2514\u2500\u2500 Node Titles >ue2\n  \u251c\u2500\u2500 Dynamic Nodes >k8p\n  \u2502   \u251c\u2500\u2500 Dynamic Definitions >07u\n  \u2502   \u251c\u2500\u2500 Lists >twz\n  \u2502   \u2502   \u2514\u2500\u2500 Example: Nodes from the Documentation >m1r\n  \u251c\u2500\u2500 Links and Pointers >00j\n  \u2502   \u251c\u2500\u2500 Links >0y2\n  \u2502   \u2502   \u2514\u2500\u2500 Sublime Text tools to help with linking >00m\n  \u2502   \u251c\u2500\u2500 Dynamic Titles >4vu\n  \u2502   \u251c\u2500\u2500 Opening Links >01w\n  \u2502   \u2502   \u251c\u2500\u2500 Sublime >osu\n  \u2502   \u2502   \u2514\u2500\u2500 Pythonista >iy8\n  \u2502   \u251c\u2500\u2500 Linking to Files and Other Resources >00q\n  \u2502   \u2502   \u251c\u2500\u2500 Web / HTTP(S) >00o\n  \u2502   \u2502   \u2514\u2500\u2500 Files >00p\n  \u251c\u2500\u2500 Exporting >ezg\n  \u2502   \u251c\u2500\u2500 Example : Urtext Documentation Exported in Markdown to a File >m9d\n  \u2502   \u2514\u2500\u2500 Example : Fragment Exported to HTML >baq\n  \u251c\u2500\u2500 File Naming >01m\n  \u251c\u2500\u2500 History >prp\n  \u251c\u2500\u2500 This node now has special reserved metadata keys that will be parsed as follows: >00l\n  \u251c\u2500\u2500 Errors and Warnings >bpk\n  \u251c\u2500\u2500 Using Multiple Projects >ipy\n  \u2502   \u251c\u2500\u2500 Project Naming (Identification) >tgp\n  \u2502   \u2514\u2500\u2500 Cross-Project Linking >7lx\n  \u2514\u2500\u2500 User Interface Elements >3n6\n      \u251c\u2500\u2500 The Node Browser >01i\n      \u2514\u2500\u2500 Traverse Mode >00w\n          \u2514\u2500\u2500 Word Wrap in Traverse Mode >xci\nAbout This Documentation >p23\n((>a5m:86))\n\n## Quick Start, Guides and Examples\n\n\n### Installation and Setup (Sublime Text / Desktop)\n\nFor desktop use (PC/Mac/Linux) Urtext is implemented in Sublime Text.\n\n1. Download Sublime Text. (https://www.sublimetext.com/).\n\n2. Download Urtext and all its dependencies from the monorepo at                                          . You can either download this repository as a .ZIP file and unzip it, or if you want to maintain version control, use                                                                         . Put the contents of the cloned/unzipped folder (important: not the folder itself) directly into your                                folder.\n\n3. Download the Sublime Urtext package at                                             . Place it in your Packages folder (Sublime Text 3/Packages)\n\n4. Clone/download this documentation repository and open its folder in Sublime. It will automatically be read as an Urtext project.\n\nOnce the Sublime package is installed, it will always look for any files with the .txt extension in open folders and attempt to compile them into a project. To open an existing Urtext project, open the folder, a file in the folder, or a Sublime project that includes the folder, and any feature described in this documentation will work.\n\nTo make a new project, open an empty folder and select Select                               from the Sublime Command Palette. For more information, see | Projects >dce.\n\n\n### Basic Syntax\n\nAll text is plain content unless inside a timestamp wrapper, dynamic definition wrapper, or preceded by a metadata assignment operator and keyname.\n\n\nBracket Node Wrappers. Can appear anywhere. Can be nested aribrarily deep.\nMore information: | Bracket Nodes >004\n\n\nNode Link. Links to the specified node by ID, like a hyperlink. \nMore information: | Links >0y2\n\n\nNode Pointer: Embeds the specified node as though it were included bracket using wrappers       (see above)\nMore information: [ MISSING LINK : lmu ] \n\n\nTitle Pipe. Placed immediately before a node link or node pointer (whitespace is ok), dynamically populates the linked node title.\nExample and more info: | Dynamic Titles >4vu\n\n\nBullet Node marker. Must be the first non-whitespace character on a line. Must include an ID in order to parse as a node.\nMore information: | Bullet Nodes >j6t\n\n\nTimestamp wrapper. Parses user-defined datetime strings, with many default formats built in.\nThe first character inside the brackets may not be    , '-', or whitespace.\nExample: \nMore information: | Syntax and Format >005\n\n\nMetadata assignment operator. Accepts a user-defined key on the left, and values and timestamps on the right.\nMetadata may appear anywhere. They attach to their containing (parent) node, remember their exact location, and can serve as anchors/bookmarks to context. Keys must be single words (underscore permitted), values may be any characters, terminated with a semicolon or newline. The pipe character (   ) separates multiple values for a single key.\nExample:\n\n\n### Dynamic Definitions : Syntax and Parameters\n\nDynamic definitions are instructions for dynamically building nodes from other nodes. Definitions can be written anywhere; it is not necessary to store a definition in the same file to which it refers. (Definitions cannot, however, be stored in the node they target, since they would overwrite themselves.)\n\nDynamic definitions are wrapped with double left and right square brackets(    ,    ). There are no restrictions on spacing, indentation, newlines, or other arbitrary text or whitespace. The order of parameters within a definition is unimportant; they are evaluated as a group.\n\nThis dynamic definition below is for documentation and does not actually do anything. It rather lists every parameter along with an explanation of its use and purpose. For example uses, see | Dynamic Nodes >k8p\n\n\n[[ \tID() \t\t\tTarget node to dynamically populate with output.\nAccepts a link to a node [ MISSING LINK : eee ] )\n\nINCLUDE()  \t\tNodes to include. Accepts one or more key/value pairs and optional parameters.\nor +()\nComparisons:\n\nmeans equal to\nINCLUDE(key = value)\t\nIncludes all nodes with the given key containing the given value\n\nmeans \"contains\"\nINCLUDE(_contents ? some text or content)\nIncludes all nodes containing \"some text or content\" in their text contents.\n(See also -search)\n\nmeans \"anything\"\nINCLUDE(index = *)\nIncludes all nodes containing the key        \n\nUse semicolon or newline to separate entries, as everywhere in Urtext.\n\nAdditional Flags:\n\nAdditional flags can be included in \n\nINCLUDE(*) or +(*)\nIncludes all nodes in the project\t\t\t\t\t\t\t\t\t\n\nor     \nINCLUDE(-all_projects) or +(*p)\nExpands included nodes to include all projects in the project list.\n\n\nIncludes all nodes that contain only whitespace as their content\n\nNote these additional flags substitute for semicolons/newlines as separators between entries.\n\nSystem keys\n\nUrtext includes some built-in keys whose values are generated automatically. \nThese may also be used in INCLUDE(): \n\n\nINCLUDE(_links_to = 46d)\nIncludes all nodes that contain links to node ID      \n\n\nINCLUDE(_links_from = 46d)\nIncludes all nodes to which node ID       links\n\n: Refers to a node's text contents. \nCan be used, for instance, for full text search or comparison.\nINCLUDE(_contents ? Western Civilization)\nIncludes any node that contents the text \"Western Civilization\"\n(comparisons are case-insensitive)\n\nEXCLUDE()\t\tAccepts all the same parameters as INCLUDE()\nor -()\t\t\tAlways evaluated after INCLUDE(), excludes the specified nodes from the result.\n\n\n\nSORT()\t\t\tSorts the results. Entries can be keynames (include system-defined ones, see below)\nor flags, with multiple keys separated by semicolon or newline.\n\nSORT(\n\n[ key name ]\t\tSorts by the value of the given key. Default is alphabetical.\n\n-num or -n  \t\tSorts the results numerically if possible.\nThe default sort is alphabetical.\n\n-timestamp or -t  \tSort by timestamp\n\n-reverse or -r \t\tReverses the sort order. Applicable to any of the above.\n\n)\n\nNote that system-assigned keys are also available:\n\n\n\n\nExample:\nSORT(title -reverse)\n\nLIMIT()\t\t\tLimits the output to the specified number of results.\nLimit is applied after SORT().\n\nExample:\nLIMIT(30)\nWill only show 30 results of nodes with the specified INCLUDE()/EXCLUDE() parameters.\n\n\nLIST()\t\t\tThis is the default output if no other is specified. \nIt outputs a list of (unique) nodes specified by the combination of INCLUDE() with EXCLUDE(). \nTo see instead a tree representation of each node and its descendants, if any, provide a level of depth as\na parameter. Example: LIST(5). \n\nTo show unlimited depth (until recursion, if it occurs), use the asterisk: LIST(*)\n\nCOLLECT()\t\tAggregates occurrences of metadata, including timestamps, and surrounding contents.\nAccepts key/value pais \nReturns a seperate item for each occurence.\n\nExample:\nCOLLECT(timestamp=*)\n\n\nSHOW()\t\t\tSupplies a template for the output of each result. \nAccepts keynames, denoted with    , arbitrary text, and Unicode characters including \\n, \\r, \\t.\n\nWords preceded by     are are evaluated as metadata keys, replaced in the output by their value(s).\nNote that key names themselves are not displayed in the output. Add keynames manually if you want them included.\n\nExample:\nSHOW(Author: $author, Date: $date\\n)\n\nIn addition to all user-defined metadata keys, the following tokens are included:\n\nSHOW(\n\n$title \nDisplays the node title, default or via the         meta key\n\n$link\nDisplays a link to the node\n\n$date \nDisplays the node's date in the project's default timestamp format\n\n$meta\nShorthand to show all metadata for every node, formatted as by \"consolidate metadata\"\n\n$contents:120\nDisplays the contents of the node. Optional excerpt/length specifier after the colon\n)\n\nHEADER()\t\tAdds additional arbitrary/freeform text to the beginning of the output. This can include any syntax \nvalid inside Urtext nodes, including metadata.\n\nFOOTER()\t\tAdds additional arbitrary/freeform text to the end of the output. Same as for HEADER().\n\nMARKDOWN()\t\tOutputs a Markdown representaion of the node(s) into another node or into an external file.\nWill include all hierarchically nested nodes using Markdown heading format.\nSee FORMAT() for ways to preformat the output.\n\nAccepts one or more semicolon- or newline-separated links to nodes or files (see | Linking to outside \nresources >00q)\n\nTo include all nodes pointed to from the root file, recursively, use the flag:\n\n\nHTML()\t\t\tAs for MARKDOWN(), but outputs as HTML.\n\nPLAINTEXT()\t\tAs for MARKDOWN(), but outputs Plaintext (Urtext syntax stripped out, \nincluding metadata and dynamic definitions.)\n\nCan be used, for instance, to export a node or nodes to a non-Urtext text file.\n\nFORMAT()\t\tSpecificies additional global formatting of the output. There are intended primarily for formatting \nexported text, but can be applied to any output. Accepts one or more predefined flags:\n\n-preformat or -pre\nWraps preformatted text (trees, etc.) in backticks to preserve preformatting, \nfor instance, for Markdown contenxts.\n\n-multiline_meta or -mm\nPlaces dynamic node metadata on separate lines instead of separated by;\n\n-indent: or -i\nIndents the dynamic node by the number of spaces specified in parentheses.\nExample: FORMAT(-indent:20)\n\n]]\n| Sublime Text Key Bindings and Operations >1vs\n\n## Reference\n\n\n### Projects\n\nAn Urtext project is a single folder. The folder must contain at least file with an Urtext Node ID.\n\nTo make an new empty project:\n\n- make a new folder and open the folder in Sublime Text. \n- Select Urtext : Initialize Project from the Sublime Command Palette. \n- The folder how has one Urtext file and a           folder for tracking edits. (See | History >prp )\n\n#### Using/Adding Existing Files\n\nOnce a folder contains at least one file with a node ID, you can add and use existing plaintext files in the project without any modification. However for most of the benefits of Urtext you must minimally an ID (| Node IDs >01q) in each file.\n\nTo do so, select                           from the Sublime Command palette.\n\nNote the append will occur without a confirmation dialog, so if you are just experimenting with this system, consider making a copy of your file folder so you can revert without having to manually remove the metadata.\n\n\n### Nodes\n\nA node is region, or set of regions, of a file, up to and including the entire file. \nA file is itself a node. \nAll nodes can contain other nodes.\n\nThe identity of an Urtext node persists no matter its containing filename. This is accomplished by assigning each node a three-character identifier using alpha-numeric characters, providing over 46,000 possible nodes per project. See | Node IDs >01q for more information.\n\nUrtext generates IDs automatically on creation of new nodes. ID's can be changed without affecting functionality, though links must then be manually updated as well. \n\nIt is possible to use files containing no IDs in an Urtext project, but then most of the features of Urtext are lost.\n\n#### Types of Nodes\n\n\n\n##### File Nodes\n\nThe most basic node is a single file. It may or may not contain other nodes nested inside it.\n\nTo create a new file-level node: | New Node: ctrl + shift + ; >ve3. A new file is created and named automatically. It contains a single node ID and (by default) a creation timestamp.\n\n\n##### Bracket Nodes                                                       \n\nNodes can be nested arbitrarily deep inside other nodes, whether the parent node is a file or another bracket node. For all purposes in Urtext, bracket nodes' identities are unique from their containing files, parent nodes, and child nodes.   \n\nThe syntax for bracket nodes is to wrap the content in curly braces:\n\n###### Example Bracket NodeCreate an bracket nodes with | Insert Inline Node: >rzx. Inside the inserted double curly braces is a new node with an auto-generated ID.   \n\nTo wrap existing content into an bracket node, first select the content and use the same keypress.\n\nWhen syntax highlighting is active, bracket node wrappers are tinted to showing nesting level:\n\n###### Example first level\n\n####### second level\n\n######## third test level\n\n######### fourth level\n\n########## fifth level(The following metadata excludes this example from the Table of Contents tree. See [ MISSING LINK : v7r ]  for information)(For Markdown export, a screenshot is provided showing indentation and highlighting:) [./files/node-nesting-example.png](./files/node-nesting-example.png)\n\nNote that every opening curly bracket must be closed in the same file. Every node requires an ID between its opening and closing brackets. Nodes at the file level (| File Nodes >ekz) do not use curly-braces, as their region boundaries are the file itself.\n\n###### Escaping Curly Brackets\n\nIf you need to use curly brackets in your text, you can escape the Urtext syntax by preceding the bracket with a backward slash; this will prevent them from being parsed: \\{ \\}\n\nTo ignore syntax elements more globally, and/or to embed other syntaxes that use Urtext characters, such as JSON, PHP, and JavaScript, see [ MISSING LINK : oy5 ] \n\n\n##### Compact Nodes\n\nKey: | Insert Compact Node: >1qq\n\nFor text content requiring only a single line, such as list items, very short notes and similar, use the caret character (   ) as the first non-whitesoace character on a new line. This defines a new node as a child of the node in which the character appears, with the closing wrapper being the end of the same line. \n\nLike all nodes, a compact node requires an ID. Like all nodes, it can contain metadata and even inline nodes, as long as the entire contents, including wrappers and metadata, are contained on a single line. (Note that \"line\" in this case refers to consecutive characters between explicit line breaks, and not to lines in the editor, which may be arbitrarily wrapped.)\n\n###### Example Compact Node\n\n####### Example inline node within compact node.[./files/example-compact-node.png](./files/example-compact-node.png)\n\n#### Node Titles\n\nBy default, the full first non-whitespace line of any node is the node's title. This can be overridden using the         metadata key or by following the desired text with the underscore (   ) character as used in this document.\n\n\n### Dynamic Nodes\n\nDynamic nodes contain content aggregated from the contents of other nodes. Dynamic content stays up to date with its source content \"dynamically\" (on file save). A dynamic node can be seen as a \"view into\" other content.\n\n#### Dynamic Definitions\n\nDynamic nodes are created using a Dynamic Definition. Dynamic Definitions are specified with double square brackets , and have there own syntax, including scoping and highlighting. Dynamic definitions can query, sort, filter, and format the output of nodes in a variety of ways, making them adaptable to many purposes. This section illustrates some example uses of dynamic nodes. It will be helpful to reference | Dynamic Definitions : Syntax and Parameters >87g.\n\nDynamic Definitions can be written anywhere; it is not necessary to store the definition in the same file to which it refers. (Note that they cannot, however, be stored in the node they target, since they would overwrite themselves.)\n\nThe key | Insert Dynamic Definition with Node:                    >jsc creates a new dynamic definition in Sublime, auto-populated with a corresponding empty inline node. You can also write a definition manually, providing the ID of an existing node. For example, if you want the contents to replace an existing node, assign this key the value of that node's ID. If you want it to populate new inline node, create that node and then copy/paste its ID. Note that Dynamic Definitions do not create their target nodes automatically ; the target node must exist, or the definition will have no effect.There are two main kinds of dynamic output, Lists and Collections:\n\n\"Lists\" are lists of nodes, with each node displayed not more than once. Lists can optionally expand into trees, showing the hierarchy of nested relationships from each root node in the list.\n\n\n\n#### Lists\n\n##### Example: Nodes from the Documentation\n\nproject_settings >8p4\nTemplating the Output with the SHOW parameter >8p5\nGenerated automatically in a dynamic node, contains a link to the node containing the definition. >5cq\nList Projects: >g5a\nTimestamps >2i4\nLinks >0y2\nBasic Syntax >znj\nInsert Dynamic Definition with Node: >jsc\nFull Text Search >4p9\nHome Node: >5ab\nCopy Link to this Node With Title: >05x\nNodes Excluded from the Table of Contents >jkl\nCopy Link to this Node: >vel\nComparison To Other Tools >h8z\nToggle History Traverse: >ndc\nNew Node: ctrl + shift + ; >ve3\nDynamic Definitions : Syntax and Parameters >87g\nExample Bracket Node >ywi\nTime Zones >7w6\nCase-sensitivity >l36\n((>twz:7))[./files/example-list-1-definition.png](./files/example-list-1-definition.png)\n[./files/example-list-1.png](./files/example-list-1.png)\n\nNote that the at the bottom of the node is the reserved key       which refers to the node containing the definition.\n\nLists can be expanded into trees that show the outline of many nodes across many files at any specified depth, up to. In fact, a list is a tree with depth 1.\n\n| Trees >>w8u\n\n\"Collections\" aggregate metadata entries with their context; the same node may appear many times in a collection if it contains many metadata entries matching the queried parameters.\n\n| Collections >>00k\n\n\n### Links and Pointers\n\n#### Links \n\nTo make a \"hyperlink\" from one node to another, use the right angle bracket (>) followed immediately by a node ID. Linking does not require a filename or any other information, only the node ID. Any other surrounding text is ignored.\n\n##### Sublime Text tools to help with linking \n\n\nTwo Sublime Command Palette commands can make linking quick and easy:\n\nUrtext : Link To ...\nLinks from the currently viewed node to another node which you can select in the selection panel. When you select a node in the quick panel, a link to that node will be inserted at the cursor.\n\nUrtext: Link From ...\nLinks TO the current node FROM another node. When you select this command, a link to the current node will be copied to the clipboard. You can then paste the reference into the node you open in the quick panel.\n\n#### Dynamic Titles\n\nPrepending a pipe character to any node link will populate the space between the pipe and link with the node's title, from its metadata or default title. Examples are found throughout this documentation. Titled links are updated at the single file level whenever the file is saved.\n\n#### Opening Links\n\n##### Sublime\nKey : | Open Urtext Link: >ngh on a line containing a link to open the node with the linked ID. If the link is to an inline node, Sublime will scroll to and center its starting point.\n\n##### Pythonista \n\nUse the     botton when the cursor is on any line containing a link.Note that Urtext reads node regions on every save, so cursor location may be imprecise if the file has been altered since the last save.\n\n#### Linking to Files and Other Resources\n\n##### Web / HTTP(S)\n\nHTTP(S) links are recognized automatically and will open in the default browser.    \nExample: pressing | Open Urtext Link: >ngh on this line will open the link: http://github.com\n\n##### Files\n\nLinks to files can be made by writing     , followed immediately with a file path relative to the folder of the project:\nExample: [README.md](README.md)\n|  ?  >>lmu\n\n\n### Exporting\nUrtext can export to plaintext, Markdown and HTML. Output can be written to a file or back into another node in the project. Exporting is dynamic; when changes are made to the source files, exports are immediately updated.\n\n#### Example : Urtext Documentation Exported in Markdown to a File\n\nThis dynamic definition exports the entire documentation from its root node | Urtext  Version: 1.0-alpha  Usage Guide and References >a5m ) in Markdown format to a file called [./README.md:](./README.md:)\n\n\n[ MISSING LINK : l0i ] \n\n#### Example : Fragment Exported to HTML\n\nThe following Dynamic Definition is identical to the above, except it exports to HTML.\n\n\n### File Naming                                                                                \n\nSince node identities are independent of their filenames, you can use any naming convention you want. Urtext can also rename files automatically in convenient formats based on their title and/or index. Renaming by index is useful, for instance, if you want file-level nodes easily readable inside a file system, mobile app, or other file browser.\n\nTo rename a file, select \"Rename File from Meta\" from the command palette (Command-P). This will rename the file in one of the following schema:\n\nIf an index is present:\n\n.txt\n\nIf no index is present:\n\n.txt\n\nThis system preserves automatic numerical sorting within the filesystem, such that the most recent un-indexed nodes appear first. If you want to use another system, such as putting the title first, you can do so.\n\n\n### History\n\nThough use of powerful version control tools (such as Git, Mercurial, etc.) is possible, Urtext has a lighter built-in versioning system that tracks edits at intervals. It is not necessary to make explicit \"commits\" in order to utilize this. Urtext creates a single, linear history of each file's content, with each snapshot being a \"diff\", or record of changes, since the previous snapshot. When a previous state is restored, no \"checkout\" or \"rewind\" occurs; rather, the newly restored state is appended to the history. Therefore, in addition to functioning as version control, the feature can also be used as an infinite and non-destructive \"undo/redo\" editing history that saves state when the file is closed. The default interval is 10 seconds, and can be modified in project_settings. \n\nTo access a file's history, use | Toggle History Traverse: >ndc.\n\nHistories are stored in the /history folder inside the project, as .pkl (\"pickle\") files. This folder requires no user involvement. If using another version control tool such as Git, you may wish to add the /history folder to your .gitignore file, so that only explicitly committed versions of your project are visible in distributed repositories.\n\n\n### This node now has special reserved metadata keys that will be parsed as follows:\nimestamp\n\n\n### Errors and Warnings\n\n\n### Using Multiple Projects\n\nTo use multiple projects at once, there is a project context manager. When you initially pass a path to Urtext, it looks recursively in all sub folders for additional projects. If it finds a compilable Urtext project in any one, it adds these to the context manager.  You can then freely switch among projects, either explicitly, or using links between the projects (described below). When switching projects, all Urtext's features, content and behavior, including links, compiling, and all functions linked to UI buttons, will operate in the context of the selected project. \n\nYou can put all your Urtext projects into sub folders of a single path. Alternatively, you may put them anyplace in the file system and choose as your Urtext root a folder that encompasses them all. Compiling may take longer if Urtext has to search through many unused directories. \n\nUsing Python, it is possible to only instantiate a single project, without the context manager. The current implementations in Sublime and Pythonista, however, use the context manager by default, even if you are only using a single project.\n\nRecall that what defines a project is a folder. This is also what separates it from other projects. If you add other Urtext project folders into the initial path, they will all be accessible from the same project list.\n\nTo switch between projects in Sublime, select Urtext: Select Project from the command palette.\nIn Pythonista, use \"Switch Projects\" from the feature menu.\n\n#### Project Naming (Identification)\n\nUnlike nodes, projects are uniquely identified by name. For this reason, each project must have an unique name within the running instance of Urtext. Projects can be named using the project_title key in the project's project_settings node. If no name is present, the project's name becomes its absolute path in the file system.\n\n#### Cross-Project Linking\n\nYou may also link from one project to another within the text. To so this, use the following syntax:\n\n=>\"name or path of the other project[ MISSING LINK : idj ] \n(This link is only an example and is non-functioning)\n\nFollowing this link will change the project context to the named project and open its specified node.\n\n\n### User Interface Elements\n\nUrtext is made to require minimal user interface elements. They mostly serve as conveniences that duplicate \n\n\n\n#### The Node Browser\n\nThe Node browser shows a list of all nodes in the project. It can be implemented in plaintext using a dynamic definition such as: . However, \n\nalso be implemented \n\nOpening the Node List\n\nCtrl-Shift-E \n\n\n\n\nIn Sublime Text there is also the alternative of using the UI dropdown. Press Control-Shift-E or select \"Urtext: Node List\" from the Sublime command palette (Shift-Super-P). Here you can find a node by typing part of its title.\n\nIn the Node List, nodes are sorted by their time of creation, with most recent first. They can also be sorted by index (see |  ?  >00z).\n\n\n#### Traverse Mode   \n\n\n\nThis feature is currently implemented in Sublime Text only.\n\nYou can navigate a node tree or list of nodes by turning on Traverse mode (Shift-Ctrl-R). This will open another pane next to the one you are currently in. As you navigate the nodeview in the left side with the cursor or mouse, the selected node shows on the right. Use Sublime's Focus Group navigation keys, or the mouse, to switch between left and right panes.\n\nToggle Traverse Mode off by pressing Shift-Ctrl-R again. The status bar at the bottom of the Sublime window indicates whether Traverse is on or off. \n\nNote that if Traverse mode is off, you can also open a link manually (Shift-Ctrl-/) as normal. \n\nThis feature is not built into Urtext; it is a feature of the Sublime package only.\n\n##### Word Wrap in Traverse Mode\n\nSince Traverse Mode splits the window into two or more panes, it is suggested to set Word Wrap Column to \"Auto\" in Sublime Settings. This will cause the edited views to wrap correctly no matter the screen or window/pane size, as well as in Sublime's Distraction Free Mode.\n\nWhenever Traverse Mode is enabled on a view, word wrap for that view is turned off altogether to prevent awkward wrapping of trees. It is restored when Traverse Mode is turned off.ss((>a5m:186)) @k06", "1632754711": "@@ -1,32080 +0,0 @@\n- %0Asdfsdf%0A# About Urtext%7C  %3E%3E013%0A%0A## About This Documentation%0A%0AThis is a documentation of Urtext written in Urtext. README.MD was exported from the Urtext files in this repository. Clone or download the repository to use it as both reference and example project. %0A%0AThis documentation is in active development. It may be incomplete or behind features/functionality of Urtext. Edits and revisions are encouraged in the form of issues and pull requests (https://github.com/nbeversl/urtext-docs/pulls, https://github.com/nbeversl/urtext-docs/issues).%0A%0AMany of the examples rely on syntax and formatting that are stripped out in export to Markdown. These are replaced with screenshots as necessary (see %7C Linking to Files and Other Resources %3E00q and %7C Exporting %3Eezg)%0A%0AInside an Urtext implementation, such as the Sublime Text with the Urtext package, you can navigate the project directly. Most of the key commands utilize Control-Shift as the modifier. %0A%0A- Control-Shift-/ to follow any link%0A- Control-Shift-H at any time to return to this %22home%22 node. %0A- View the readme: %5Breadme.md ;%5D(readme.md ;)%0A%0A## Quick Start, Guides and Examples%0A%0A%0A### Installation and Setup (Sublime Text / Desktop)%0A%0AFor desktop use (PC/Mac/Linux) Urtext is implemented in Sublime Text.%0A%0A1. Download Sublime Text. (https://www.sublimetext.com/).%0A%0A2. Download Urtext and all its dependencies from the monorepo at                                          . You can either download this repository as a .ZIP file and unzip it, or if you want to maintain version control, use                                                                         . Put the contents of the cloned/unzipped folder (important: not the folder itself) directly into your                                folder.%0A%0A3. Download the Sublime Urtext package at                                             . Place it in your Packages folder (Sublime Text 3/Packages)%0A%0A4. Clone/download this documentation repository and open its folder in Sublime. It will automatically be read as an Urtext project.%0A%0AOnce the Sublime package is installed, it will always look for any files with the .txt extension in open folders and attempt to compile them into a project. To open an existing Urtext project, open the folder, a file in the folder, or a Sublime project that includes the folder, and any feature described in this documentation will work.%0A%0ATo make a new project, open an empty folder and select Select                               from the Sublime Command Palette. For more information, see %7C Projects %3Edce.%0A%0A%0A### Basic Syntax%0A%0AAll text is plain content unless inside a timestamp wrapper, dynamic definition wrapper, or preceded by a metadata assignment operator and keyname.%0A%0A%0ABracket Node Wrappers. Can appear anywhere. Can be nested aribrarily deep.%0AMore information: %7C Bracket Nodes %3E004%0A%0A%0ANode Link. Links to the specified node by ID, like a hyperlink. %0AMore information: %7C Links %3E0y2%0A%0A%0ANode Pointer: Embeds the specified node as though it were included bracket using wrappers       (see above)%0AMore information: %5B MISSING LINK : lmu %5D %0A%0A%0ATitle Pipe. Placed immediately before a node link or node pointer (whitespace is ok), dynamically populates the linked node title.%0AExample and more info: %7C Dynamic Titles %3E4vu%0A%0A%0ABullet Node marker. Must be the first non-whitespace character on a line. Must include an ID in order to parse as a node.%0AMore information: %7C Bullet Nodes %3Ej6t%0A%0A%0ATimestamp wrapper. Parses user-defined datetime strings, with many default formats built in.%0AThe first character inside the brackets may not be    , '-', or whitespace.%0AExample: %0AMore information: %7C Syntax and Format %3E005%0A%0A%0AMetadata assignment operator. Accepts a user-defined key on the left, and values and timestamps on the right.%0AMetadata may appear anywhere. They attach to their containing (parent) node, remember their exact location, and can serve as anchors/bookmarks to context. Keys must be single words (underscore permitted), values may be any characters, terminated with a semicolon or newline. The pipe character (   ) separates multiple values for a single key.%0AExample:%0A%0A%0A### Dynamic Definitions : Syntax and Parameters%0A%0ADynamic definitions are instructions for dynamically building nodes from other nodes. Definitions can be written anywhere; it is not necessary to store a definition in the same file to which it refers. (Definitions cannot, however, be stored in the node they target, since they would overwrite themselves.)%0A%0ADynamic definitions are wrapped with double left and right square brackets(    ,    ). There are no restrictions on spacing, indentation, newlines, or other arbitrary text or whitespace. The order of parameters within a definition is unimportant; they are evaluated as a group.%0A%0AThis dynamic definition below is for documentation and does not actually do anything. It rather lists every parameter along with an explanation of its use and purpose. For example uses, see %7C Dynamic Nodes %3Ek8p%0A%0A%0A%5B%5B %09ID() %09%09%09Target node to dynamically populate with output.%0AAccepts a link to a node %5B MISSING LINK : eee %5D )%0A%0AINCLUDE()  %09%09Nodes to include. Accepts one or more key/value pairs and optional parameters.%0Aor +()%0AComparisons:%0A%0Ameans equal to%0AINCLUDE(key = value)%09%0AIncludes all nodes with the given key containing the given value%0A%0Ameans %22contains%22%0AINCLUDE(_contents ? some text or content)%0AIncludes all nodes containing %22some text or content%22 in their text contents.%0A(See also -search)%0A%0Ameans %22anything%22%0AINCLUDE(index = *)%0AIncludes all nodes containing the key        %0A%0AUse semicolon or newline to separate entries, as everywhere in Urtext.%0A%0AAdditional Flags:%0A%0AAdditional flags can be included in %0A%0AINCLUDE(*) or +(*)%0AIncludes all nodes in the project%09%09%09%09%09%09%09%09%09%0A%0Aor     %0AINCLUDE(-all_projects) or +(*p)%0AExpands included nodes to include all projects in the project list.%0A%0A%0AIncludes all nodes that contain only whitespace as their content%0A%0ANote these additional flags substitute for semicolons/newlines as separators between entries.%0A%0ASystem keys%0A%0AUrtext includes some built-in keys whose values are generated automatically. %0AThese may also be used in INCLUDE(): %0A%0A%0AINCLUDE(_links_to = 46d)%0AIncludes all nodes that contain links to node ID      %0A%0A%0AINCLUDE(_links_from = 46d)%0AIncludes all nodes to which node ID       links%0A%0A: Refers to a node's text contents. %0ACan be used, for instance, for full text search or comparison.%0AINCLUDE(_contents ? Western Civilization)%0AIncludes any node that contents the text %22Western Civilization%22%0A(comparisons are case-insensitive)%0A%0AEXCLUDE()%09%09Accepts all the same parameters as INCLUDE()%0Aor -()%09%09%09Always evaluated after INCLUDE(), excludes the specified nodes from the result.%0A%0A%0A%0ASORT()%09%09%09Sorts the results. Entries can be keynames (include system-defined ones, see below)%0Aor flags, with multiple keys separated by semicolon or newline.%0A%0ASORT(%0A%0A%5B key name %5D%09%09Sorts by the value of the given key. Default is alphabetical.%0A%0A-num or -n  %09%09Sorts the results numerically if possible.%0AThe default sort is alphabetical.%0A%0A-timestamp or -t  %09Sort by timestamp%0A%0A-reverse or -r %09%09Reverses the sort order. Applicable to any of the above.%0A%0A)%0A%0ANote that system-assigned keys are also available:%0A%0A%0A%0A%0AExample:%0ASORT(title -reverse)%0A%0ALIMIT()%09%09%09Limits the output to the specified number of results.%0ALimit is applied after SORT().%0A%0AExample:%0ALIMIT(30)%0AWill only show 30 results of nodes with the specified INCLUDE()/EXCLUDE() parameters.%0A%0A%0ALIST()%09%09%09This is the default output if no other is specified. %0AIt outputs a list of (unique) nodes specified by the combination of INCLUDE() with EXCLUDE(). %0ATo see instead a tree representation of each node and its descendants, if any, provide a level of depth as%0Aa parameter. Example: LIST(5). %0A%0ATo show unlimited depth (until recursion, if it occurs), use the asterisk: LIST(*)%0A%0ACOLLECT()%09%09Aggregates occurrences of metadata, including timestamps, and surrounding contents.%0AAccepts key/value pais %0AReturns a seperate item for each occurence.%0A%0AExample:%0ACOLLECT(timestamp=*)%0A%0A%0ASHOW()%09%09%09Supplies a template for the output of each result. %0AAccepts keynames, denoted with    , arbitrary text, and Unicode characters including %5Cn, %5Cr, %5Ct.%0A%0AWords preceded by     are are evaluated as metadata keys, replaced in the output by their value(s).%0ANote that key names themselves are not displayed in the output. Add keynames manually if you want them included.%0A%0AExample:%0ASHOW(Author: $author, Date: $date%5Cn)%0A%0AIn addition to all user-defined metadata keys, the following tokens are included:%0A%0ASHOW(%0A%0A$title %0ADisplays the node title, default or via the         meta key%0A%0A$link%0ADisplays a link to the node%0A%0A$date %0ADisplays the node's date in the project's default timestamp format%0A%0A$meta%0AShorthand to show all metadata for every node, formatted as by %22consolidate metadata%22%0A%0A$contents:120%0ADisplays the contents of the node. Optional excerpt/length specifier after the colon%0A)%0A%0AHEADER()%09%09Adds additional arbitrary/freeform text to the beginning of the output. This can include any syntax %0Avalid inside Urtext nodes, including metadata.%0A%0AFOOTER()%09%09Adds additional arbitrary/freeform text to the end of the output. Same as for HEADER().%0A%0AMARKDOWN()%09%09Outputs a Markdown representaion of the node(s) into another node or into an external file.%0AWill include all hierarchically nested nodes using Markdown heading format.%0ASee FORMAT() for ways to preformat the output.%0A%0AAccepts one or more semicolon- or newline-separated links to nodes or files (see %7C Linking to outside %0Aresources %3E00q)%0A%0ATo include all nodes pointed to from the root file, recursively, use the flag:%0A%0A%0AHTML()%09%09%09As for MARKDOWN(), but outputs as HTML.%0A%0APLAINTEXT()%09%09As for MARKDOWN(), but outputs Plaintext (Urtext syntax stripped out, %0Aincluding metadata and dynamic definitions.)%0A%0ACan be used, for instance, to export a node or nodes to a non-Urtext text file.%0A%0AFORMAT()%09%09Specificies additional global formatting of the output. There are intended primarily for formatting %0Aexported text, but can be applied to any output. Accepts one or more predefined flags:%0A%0A-preformat or -pre%0AWraps preformatted text (trees, etc.) in backticks to preserve preformatting, %0Afor instance, for Markdown contenxts.%0A%0A-multiline_meta or -mm%0APlaces dynamic node metadata on separate lines instead of separated by;%0A%0A-indent: or -i%0AIndents the dynamic node by the number of spaces specified in parentheses.%0AExample: FORMAT(-indent:20)%0A%0A%5D%5D%0A%7C Sublime Text Key Bindings and Operations %3E1vs%0A%0A## Reference%0A%0A%0A### Projects%0A%0AAn Urtext project is a single folder. The folder must contain at least file with an Urtext Node ID.%0A%0ATo make an new empty project:%0A%0A- make a new folder and open the folder in Sublime Text. %0A- Select Urtext : Initialize Project from the Sublime Command Palette. %0A- The folder how has one Urtext file and a           folder for tracking edits. (See %7C History %3Eprp )%0A%0A#### Using/Adding Existing Files%0A%0AOnce a folder contains at least one file with a node ID, you can add and use existing plaintext files in the project without any modification. However for most of the benefits of Urtext you must minimally an ID (%7C Node IDs %3E01q) in each file.%0A%0ATo do so, select                           from the Sublime Command palette.%0A%0ANote the append will occur without a confirmation dialog, so if you are just experimenting with this system, consider making a copy of your file folder so you can revert without having to manually remove the metadata.%0A%0A%0A### Nodes%0A%0AA node is region, or set of regions, of a file, up to and including the entire file. %0AA file is itself a node. %0AAll nodes can contain other nodes.%0A%0AThe identity of an Urtext node persists no matter its containing filename. This is accomplished by assigning each node a three-character identifier using alpha-numeric characters, providing over 46,000 possible nodes per project. See %7C Node IDs %3E01q for more information.%0A%0AUrtext generates IDs automatically on creation of new nodes. ID's can be changed without affecting functionality, though links must then be manually updated as well. %0A%0AIt is possible to use files containing no IDs in an Urtext project, but then most of the features of Urtext are lost.%0A%0A#### Types of Nodes%0A%0A%0A%0A##### File Nodes%0A%0AThe most basic node is a single file. It may or may not contain other nodes nested inside it.%0A%0ATo create a new file-level node: %7C New Node: ctrl + shift + ; %3Eve3. A new file is created and named automatically. It contains a single node ID and (by default) a creation timestamp.%0A%0A%0A##### Bracket Nodes                                                       %0A%0ANodes can be nested arbitrarily deep inside other nodes, whether the parent node is a file or another bracket node. For all purposes in Urtext, bracket nodes' identities are unique from their containing files, parent nodes, and child nodes.   %0A%0AThe syntax for bracket nodes is to wrap the content in curly braces:%0A%0A###### Example Bracket NodeCreate an bracket nodes with %7C Insert Inline Node: %3Erzx. Inside the inserted double curly braces is a new node with an auto-generated ID.   %0A%0ATo wrap existing content into an bracket node, first select the content and use the same keypress.%0A%0AWhen syntax highlighting is active, bracket node wrappers are tinted to showing nesting level:%0A%0A###### Example first level%0A%0A####### second level%0A%0A######## third test level%0A%0A######### fourth level%0A%0A########## fifth level(The following metadata excludes this example from the Table of Contents tree. See %5B MISSING LINK : v7r %5D  for information)(For Markdown export, a screenshot is provided showing indentation and highlighting:) %5B./files/node-nesting-example.png%5D(./files/node-nesting-example.png)%0A%0ANote that every opening curly bracket must be closed in the same file. Every node requires an ID between its opening and closing brackets. Nodes at the file level (%7C File Nodes %3Eekz) do not use curly-braces, as their region boundaries are the file itself.%0A%0A###### Escaping Curly Brackets%0A%0AIf you need to use curly brackets in your text, you can escape the Urtext syntax by preceding the bracket with a backward slash; this will prevent them from being parsed: %5C%7B %5C%7D%0A%0ATo ignore syntax elements more globally, and/or to embed other syntaxes that use Urtext characters, such as JSON, PHP, and JavaScript, see %5B MISSING LINK : oy5 %5D %0A%0A%0A##### Compact Nodes%0A%0AKey: %7C Insert Compact Node: %3E1qq%0A%0AFor text content requiring only a single line, such as list items, very short notes and similar, use the caret character (   ) as the first non-whitesoace character on a new line. This defines a new node as a child of the node in which the character appears, with the closing wrapper being the end of the same line. %0A%0ALike all nodes, a compact node requires an ID. Like all nodes, it can contain metadata and even inline nodes, as long as the entire contents, including wrappers and metadata, are contained on a single line. (Note that %22line%22 in this case refers to consecutive characters between explicit line breaks, and not to lines in the editor, which may be arbitrarily wrapped.)%0A%0A###### Example Compact Node%0A%0A####### Example inline node within compact node.%5B./files/example-compact-node.png%5D(./files/example-compact-node.png)%0A%0A#### Node Titles%0A%0ABy default, the full first non-whitespace line of any node is the node's title. This can be overridden using the         metadata key or by following the desired text with the underscore (   ) character as used in this document.%0A%0A%0A### Dynamic Nodes%0A%0ADynamic nodes contain content aggregated from the contents of other nodes. Dynamic content stays up to date with its source content %22dynamically%22 (on file save). A dynamic node can be seen as a %22view into%22 other content.%0A%0A#### Dynamic Definitions%0A%0ADynamic nodes are created using a Dynamic Definition. Dynamic Definitions are specified with double square brackets , and have there own syntax, including scoping and highlighting. Dynamic definitions can query, sort, filter, and format the output of nodes in a variety of ways, making them adaptable to many purposes. This section illustrates some example uses of dynamic nodes. It will be helpful to reference %7C Dynamic Definitions : Syntax and Parameters %3E87g.%0A%0ADynamic Definitions can be written anywhere; it is not necessary to store the definition in the same file to which it refers. (Note that they cannot, however, be stored in the node they target, since they would overwrite themselves.)%0A%0AThe key %7C Insert Dynamic Definition with Node:                    %3Ejsc creates a new dynamic definition in Sublime, auto-populated with a corresponding empty inline node. You can also write a definition manually, providing the ID of an existing node. For example, if you want the contents to replace an existing node, assign this key the value of that node's ID. If you want it to populate new inline node, create that node and then copy/paste its ID. Note that Dynamic Definitions do not create their target nodes automatically ; the target node must exist, or the definition will have no effect.There are two main kinds of dynamic output, Lists and Collections:%0A%0A%22Lists%22 are lists of nodes, with each node displayed not more than once. Lists can optionally expand into trees, showing the hierarchy of nested relationships from each root node in the list.%0A%0A%0A%0A#### Lists%0A%0A##### Example: Nodes from the Documentation%0A%0Aproject_settings %3E8p4%0ATemplating the Output with the SHOW parameter %3E8p5%0AGenerated automatically in a dynamic node, contains a link to the node containing the definition. %3E5cq%0AList Projects: %3Eg5a%0ATimestamps %3E2i4%0ALinks %3E0y2%0ABasic Syntax %3Eznj%0AInsert Dynamic Definition with Node: %3Ejsc%0AFull Text Search %3E4p9%0AHome Node: %3E5ab%0ACopy Link to this Node With Title: %3E05x%0ANodes Excluded from the Table of Contents %3Ejkl%0ACopy Link to this Node: %3Evel%0AComparison To Other Tools %3Eh8z%0AToggle History Traverse: %3Endc%0ANew Node: ctrl + shift + ; %3Eve3%0ADynamic Definitions : Syntax and Parameters %3E87g%0AExample Bracket Node %3Eywi%0ATime Zones %3E7w6%0ACase-sensitivity %3El36%0A((%3Etwz:7))%5B./files/example-list-1-definition.png%5D(./files/example-list-1-definition.png)%0A%5B./files/example-list-1.png%5D(./files/example-list-1.png)%0A%0ANote that the at the bottom of the node is the reserved key       which refers to the node containing the definition.%0A%0ALists can be expanded into trees that show the outline of many nodes across many files at any specified depth, up to. In fact, a list is a tree with depth 1.%0A%0A%7C Trees %3E%3Ew8u%0A%0A%22Collections%22 aggregate metadata entries with their context; the same node may appear many times in a collection if it contains many metadata entries matching the queried parameters.%0A%0A%7C Collections %3E%3E00k%0A%0A%0A### Links and Pointers%0A%0A#### Links %0A%0ATo make a %22hyperlink%22 from one node to another, use the right angle bracket (%3E) followed immediately by a node ID. Linking does not require a filename or any other information, only the node ID. Any other surrounding text is ignored.%0A%0A##### Sublime Text tools to help with linking %0A%0A%0ATwo Sublime Command Palette commands can make linking quick and easy:%0A%0AUrtext : Link To ...%0ALinks from the currently viewed node to another node which you can select in the selection panel. When you select a node in the quick panel, a link to that node will be inserted at the cursor.%0A%0AUrtext: Link From ...%0ALinks TO the current node FROM another node. When you select this command, a link to the current node will be copied to the clipboard. You can then paste the reference into the node you open in the quick panel.%0A%0A#### Dynamic Titles%0A%0APrepending a pipe character to any node link will populate the space between the pipe and link with the node's title, from its metadata or default title. Examples are found throughout this documentation. Titled links are updated at the single file level whenever the file is saved.%0A%0A#### Opening Links%0A%0A##### Sublime%0AKey : %7C Open Urtext Link: %3Engh on a line containing a link to open the node with the linked ID. If the link is to an inline node, Sublime will scroll to and center its starting point.%0A%0A##### Pythonista %0A%0AUse the     botton when the cursor is on any line containing a link.Note that Urtext reads node regions on every save, so cursor location may be imprecise if the file has been altered since the last save.%0A%0A#### Linking to Files and Other Resources%0A%0A##### Web / HTTP(S)%0A%0AHTTP(S) links are recognized automatically and will open in the default browser.    %0AExample: pressing %7C Open Urtext Link: %3Engh on this line will open the link: http://github.com%0A%0A##### Files%0A%0ALinks to files can be made by writing     , followed immediately with a file path relative to the folder of the project:%0AExample: %5BREADME.md%5D(README.md)%0A%7C  ?  %3E%3Elmu%0A%0A%0A### Exporting%0AUrtext can export to plaintext, Markdown and HTML. Output can be written to a file or back into another node in the project. Exporting is dynamic; when changes are made to the source files, exports are immediately updated.%0A%0A#### Example : Urtext Documentation Exported in Markdown to a File%0A%0AThis dynamic definition exports the entire documentation from its root node %7C Urtext  Version: 1.0-alpha  Usage Guide and References %3Ea5m ) in Markdown format to a file called %5B./README.md:%5D(./README.md:)%0A%0A%0A%5B MISSING LINK : l0i %5D %0A%0A#### Example : Fragment Exported to HTML%0A%0AThe following Dynamic Definition is identical to the above, except it exports to HTML.%0A%0A%0A### File Naming                                                                                %0A%0ASince node identities are independent of their filenames, you can use any naming convention you want. Urtext can also rename files automatically in convenient formats based on their title and/or index. Renaming by index is useful, for instance, if you want file-level nodes easily readable inside a file system, mobile app, or other file browser.%0A%0ATo rename a file, select %22Rename File from Meta%22 from the command palette (Command-P). This will rename the file in one of the following schema:%0A%0AIf an index is present:%0A%0A.txt%0A%0AIf no index is present:%0A%0A.txt%0A%0AThis system preserves automatic numerical sorting within the filesystem, such that the most recent un-indexed nodes appear first. If you want to use another system, such as putting the title first, you can do so.%0A%0A%0A### History%0A%0AThough use of powerful version control tools (such as Git, Mercurial, etc.) is possible, Urtext has a lighter built-in versioning system that tracks edits at intervals. It is not necessary to make explicit %22commits%22 in order to utilize this. Urtext creates a single, linear history of each file's content, with each snapshot being a %22diff%22, or record of changes, since the previous snapshot. When a previous state is restored, no %22checkout%22 or %22rewind%22 occurs; rather, the newly restored state is appended to the history. Therefore, in addition to functioning as version control, the feature can also be used as an infinite and non-destructive %22undo/redo%22 editing history that saves state when the file is closed. The default interval is 10 seconds, and can be modified in project_settings. %0A%0ATo access a file's history, use %7C Toggle History Traverse: %3Endc.%0A%0AHistories are stored in the /history folder inside the project, as .pkl (%22pickle%22) files. This folder requires no user involvement. If using another version control tool such as Git, you may wish to add the /history folder to your .gitignore file, so that only explicitly committed versions of your project are visible in distributed repositories.%0A%0A%0A### This node now has special reserved metadata keys that will be parsed as follows:%0Aimestamp%0A%0A%0A### Errors and Warnings%0A%0A%0A### Using Multiple Projects%0A%0ATo use multiple projects at once, there is a project context manager. When you initially pass a path to Urtext, it looks recursively in all sub folders for additional projects. If it finds a compilable Urtext project in any one, it adds these to the context manager.  You can then freely switch among projects, either explicitly, or using links between the projects (described below). When switching projects, all Urtext's features, content and behavior, including links, compiling, and all functions linked to UI buttons, will operate in the context of the selected project. %0A%0AYou can put all your Urtext projects into sub folders of a single path. Alternatively, you may put them anyplace in the file system and choose as your Urtext root a folder that encompasses them all. Compiling may take longer if Urtext has to search through many unused directories. %0A%0AUsing Python, it is possible to only instantiate a single project, without the context manager. The current implementations in Sublime and Pythonista, however, use the context manager by default, even if you are only using a single project.%0A%0ARecall that what defines a project is a folder. This is also what separates it from other projects. If you add other Urtext project folders into the initial path, they will all be accessible from the same project list.%0A%0ATo switch between projects in Sublime, select Urtext: Select Project from the command palette.%0AIn Pythonista, use %22Switch Projects%22 from the feature menu.%0A%0A#### Project Naming (Identification)%0A%0AUnlike nodes, projects are uniquely identified by name. For this reason, each project must have an unique name within the running instance of Urtext. Projects can be named using the project_title key in the project's project_settings node. If no name is present, the project's name becomes its absolute path in the file system.%0A%0A#### Cross-Project Linking%0A%0AYou may also link from one project to another within the text. To so this, use the following syntax:%0A%0A=%3E%22name or path of the other project%5B MISSING LINK : idj %5D %0A(This link is only an example and is non-functioning)%0A%0AFollowing this link will change the project context to the named project and open its specified node.%0A%0A%0A### User Interface Elements%0A%0AUrtext is made to require minimal user interface elements. They mostly serve as conveniences that duplicate %0A%0A%0A%0A#### The Node Browser%0A%0AThe Node browser shows a list of all nodes in the project. It can be implemented in plaintext using a dynamic definition such as: . However, %0A%0Aalso be implemented %0A%0AOpening the Node List%0A%0ACtrl-Shift-E %0A%0A%0A%0A%0AIn Sublime Text there is also the alternative of using the UI dropdown. Press Control-Shift-E or select %22Urtext: Node List%22 from the Sublime command palette (Shift-Super-P). Here you can find a node by typing part of its title.%0A%0AIn the Node List, nodes are sorted by their time of creation, with most recent first. They can also be sorted by index (see %7C  ?  %3E00z).%0A%0A%0A#### Traverse Mode   %0A%0A%0A%0AThis feature is currently implemented in Sublime Text only.%0A%0AYou can navigate a node tree or list of nodes by turning on Traverse mode (Shift-Ctrl-R). This will open another pane next to the one you are currently in. As you navigate the nodeview in the left side with the cursor or mouse, the selected node shows on the right. Use Sublime's Focus Group navigation keys, or the mouse, to switch between left and right panes.%0A%0AToggle Traverse Mode off by pressing Shift-Ctrl-R again. The status bar at the bottom of the Sublime window indicates whether Traverse is on or off. %0A%0ANote that if Traverse mode is off, you can also open a link manually (Shift-Ctrl-/) as normal. %0A%0AThis feature is not built into Urtext; it is a feature of the Sublime package only.%0A%0A##### Word Wrap in Traverse Mode%0A%0ASince Traverse Mode splits the window into two or more panes, it is suggested to set Word Wrap Column to %22Auto%22 in Sublime Settings. This will cause the edited views to wrap correctly no matter the screen or window/pane size, as well as in Sublime's Distraction Free Mode.%0A%0AWhenever Traverse Mode is enabled on a view, word wrap for that view is turned off altogether to prevent awkward wrapping of trees. It is restored when Traverse Mode is turned off.%0A%0A## About Urtext%0A%0A### Description%0A%0AUrtext is a syntax and interpreter for writing, connecting and organizing text.%0A%0AUrtext's basic unit is a %22node%22, which is a range or set of ranges of text within a file. A folder of nodes is a %22project%22. The Urtext interpreter is aware of all the nodes in a project at once, so nodes can reference, modify, and organize one another, across hundreds or thousands of files. The %7C Basic Syntax %3Eznj permits instructions embedded into the text itself. %0A%0AThe present interpreter for Urtext is in Python and can be used wherever Python 3.3 or later runs. Equivalent or variant interpreters could be created in any language or editing environment. %0A%0AUrtext has no built-in user interface; it only compiles and manages the files. Using Urtext requires an implementation within a text editor or text view, with a wrapper to pass messages between back and forth. Currently there is a package for Sublime Text (Mac/Windows/Linux) and a script for Pythonista (iOS).%0A%0A### Comparison To Other Tools%0A%0AUrtext shares some characteristics with markup languages such as Markdown and LaTeX, with the important difference that it is author-facing, rather than reader-facing. It is not primarily a document conversion or document generation tool, though it can export to some other formats (currently Markdown and HTML). %0A%0AUrtext's syntax combines content, structure and instructions all together. Unlike HTML or other markup languages, there is no additional code or markup %22behind%22 the visible syntax. Everything the interpreter reads is visible to the user.%0A%0A### Uses%0A%0AIncluding but not limited to:%0A%0A- prose writing%0A- research%0A- documentation%0A- knowledge/information base%0A- journaling%0A- Zettelkasten%0A- project/personal organization%0A- notetaking%0A- lightweight database%0A- any other writing or information management that can be done in text form%0A%0A### Features and Philosophy%0A%0A#### Plain Text%0A%0APlaintext is fast, human-readable, flexible, cross-platform, device-portable, and future-proof. It can be easily diffed and version-controlled (using Git, for example). Using theming and syntax highlighting, the text forms its own user interface without relying on graphic elements.%0A%0AIt can also incorporate (embed) other plaintext syntaxes, including other markup languages and other programming language syntaxes.%0A%0A#### Freeform, Flexible Syntax%0A%0AUrtext is like an inverse programming language. Whereas most programming languages provide a %22comment%22 syntax to insert freeform text around the code, Urtext works the opposite way: all content is text unless it matches syntax for structural or instructional code.%0A%0AText can be supplemented with user-defined metadata independent of the file system's metadata (datetime stamps, comments, etc.). It can even be used as a flat-file database.%0A%0ASimilar to code projects, an Urtext project can be spread across dozens or thousands of files, with individual files providing %22routes%22, or connections, to other other files or parts of files (nodes) via their node IDs. Text elements can be linked in tree-like, recursive (tangled), and other non-hierarchical ways.%0A%0AHowever, the basics are very simple, and you can use only the parts you need.%0A%0A#### Open source%0A%0A- Usable across multiple platforms and devices.%0A%0A- Decoupled from any particular text editor or interface ; it can be incorporated into any environment that runs Python, including any scriptable text editor or Python-scriptable environment capable of displaying a text editing view.%0A%0A#### Extensibile%0A%0AUrtext Actions, Directives, and ___ all inherit from base classes that can be user-extended to add or modify functionality limited only by the power of the Python language. %0A%0AAt present these features are undocumented, but can be understood if you know Python by reading the code.%0A%0A#### Future Proof%0A%0ANo reliance on anything that may not exist in 5 or 1000 years. %0A%0AThe interpreter/compiler could be implemented in any sufficiently capable language, current, past or future.%0A%0A#### Local%0A%0AThe Urtext parser is made primarily to operate on files present locally on the device. It is not dependent on a cloud or other subscription service. %0A%0ACloud services can be used to sync project files among devices if desired.%0A%0A#### Other Features%0A%0AUrtext is designed to make direct interaction with file system mostly unnecessary. Creating, naming, saving, and organizing files is handled for you.((%3Ea5m:178)) @k06\n", "1632754209": "@@ -0,0 +1,32080 @@\n+ %0Asdfsdf%0A# About Urtext%7C  %3E%3E013%0A%0A## About This Documentation%0A%0AThis is a documentation of Urtext written in Urtext. README.MD was exported from the Urtext files in this repository. Clone or download the repository to use it as both reference and example project. %0A%0AThis documentation is in active development. It may be incomplete or behind features/functionality of Urtext. Edits and revisions are encouraged in the form of issues and pull requests (https://github.com/nbeversl/urtext-docs/pulls, https://github.com/nbeversl/urtext-docs/issues).%0A%0AMany of the examples rely on syntax and formatting that are stripped out in export to Markdown. These are replaced with screenshots as necessary (see %7C Linking to Files and Other Resources %3E00q and %7C Exporting %3Eezg)%0A%0AInside an Urtext implementation, such as the Sublime Text with the Urtext package, you can navigate the project directly. Most of the key commands utilize Control-Shift as the modifier. %0A%0A- Control-Shift-/ to follow any link%0A- Control-Shift-H at any time to return to this %22home%22 node. %0A- View the readme: %5Breadme.md ;%5D(readme.md ;)%0A%0A## Quick Start, Guides and Examples%0A%0A%0A### Installation and Setup (Sublime Text / Desktop)%0A%0AFor desktop use (PC/Mac/Linux) Urtext is implemented in Sublime Text.%0A%0A1. Download Sublime Text. (https://www.sublimetext.com/).%0A%0A2. Download Urtext and all its dependencies from the monorepo at                                          . You can either download this repository as a .ZIP file and unzip it, or if you want to maintain version control, use                                                                         . Put the contents of the cloned/unzipped folder (important: not the folder itself) directly into your                                folder.%0A%0A3. Download the Sublime Urtext package at                                             . Place it in your Packages folder (Sublime Text 3/Packages)%0A%0A4. Clone/download this documentation repository and open its folder in Sublime. It will automatically be read as an Urtext project.%0A%0AOnce the Sublime package is installed, it will always look for any files with the .txt extension in open folders and attempt to compile them into a project. To open an existing Urtext project, open the folder, a file in the folder, or a Sublime project that includes the folder, and any feature described in this documentation will work.%0A%0ATo make a new project, open an empty folder and select Select                               from the Sublime Command Palette. For more information, see %7C Projects %3Edce.%0A%0A%0A### Basic Syntax%0A%0AAll text is plain content unless inside a timestamp wrapper, dynamic definition wrapper, or preceded by a metadata assignment operator and keyname.%0A%0A%0ABracket Node Wrappers. Can appear anywhere. Can be nested aribrarily deep.%0AMore information: %7C Bracket Nodes %3E004%0A%0A%0ANode Link. Links to the specified node by ID, like a hyperlink. %0AMore information: %7C Links %3E0y2%0A%0A%0ANode Pointer: Embeds the specified node as though it were included bracket using wrappers       (see above)%0AMore information: %5B MISSING LINK : lmu %5D %0A%0A%0ATitle Pipe. Placed immediately before a node link or node pointer (whitespace is ok), dynamically populates the linked node title.%0AExample and more info: %7C Dynamic Titles %3E4vu%0A%0A%0ABullet Node marker. Must be the first non-whitespace character on a line. Must include an ID in order to parse as a node.%0AMore information: %7C Bullet Nodes %3Ej6t%0A%0A%0ATimestamp wrapper. Parses user-defined datetime strings, with many default formats built in.%0AThe first character inside the brackets may not be    , '-', or whitespace.%0AExample: %0AMore information: %7C Syntax and Format %3E005%0A%0A%0AMetadata assignment operator. Accepts a user-defined key on the left, and values and timestamps on the right.%0AMetadata may appear anywhere. They attach to their containing (parent) node, remember their exact location, and can serve as anchors/bookmarks to context. Keys must be single words (underscore permitted), values may be any characters, terminated with a semicolon or newline. The pipe character (   ) separates multiple values for a single key.%0AExample:%0A%0A%0A### Dynamic Definitions : Syntax and Parameters%0A%0ADynamic definitions are instructions for dynamically building nodes from other nodes. Definitions can be written anywhere; it is not necessary to store a definition in the same file to which it refers. (Definitions cannot, however, be stored in the node they target, since they would overwrite themselves.)%0A%0ADynamic definitions are wrapped with double left and right square brackets(    ,    ). There are no restrictions on spacing, indentation, newlines, or other arbitrary text or whitespace. The order of parameters within a definition is unimportant; they are evaluated as a group.%0A%0AThis dynamic definition below is for documentation and does not actually do anything. It rather lists every parameter along with an explanation of its use and purpose. For example uses, see %7C Dynamic Nodes %3Ek8p%0A%0A%0A%5B%5B %09ID() %09%09%09Target node to dynamically populate with output.%0AAccepts a link to a node %5B MISSING LINK : eee %5D )%0A%0AINCLUDE()  %09%09Nodes to include. Accepts one or more key/value pairs and optional parameters.%0Aor +()%0AComparisons:%0A%0Ameans equal to%0AINCLUDE(key = value)%09%0AIncludes all nodes with the given key containing the given value%0A%0Ameans %22contains%22%0AINCLUDE(_contents ? some text or content)%0AIncludes all nodes containing %22some text or content%22 in their text contents.%0A(See also -search)%0A%0Ameans %22anything%22%0AINCLUDE(index = *)%0AIncludes all nodes containing the key        %0A%0AUse semicolon or newline to separate entries, as everywhere in Urtext.%0A%0AAdditional Flags:%0A%0AAdditional flags can be included in %0A%0AINCLUDE(*) or +(*)%0AIncludes all nodes in the project%09%09%09%09%09%09%09%09%09%0A%0Aor     %0AINCLUDE(-all_projects) or +(*p)%0AExpands included nodes to include all projects in the project list.%0A%0A%0AIncludes all nodes that contain only whitespace as their content%0A%0ANote these additional flags substitute for semicolons/newlines as separators between entries.%0A%0ASystem keys%0A%0AUrtext includes some built-in keys whose values are generated automatically. %0AThese may also be used in INCLUDE(): %0A%0A%0AINCLUDE(_links_to = 46d)%0AIncludes all nodes that contain links to node ID      %0A%0A%0AINCLUDE(_links_from = 46d)%0AIncludes all nodes to which node ID       links%0A%0A: Refers to a node's text contents. %0ACan be used, for instance, for full text search or comparison.%0AINCLUDE(_contents ? Western Civilization)%0AIncludes any node that contents the text %22Western Civilization%22%0A(comparisons are case-insensitive)%0A%0AEXCLUDE()%09%09Accepts all the same parameters as INCLUDE()%0Aor -()%09%09%09Always evaluated after INCLUDE(), excludes the specified nodes from the result.%0A%0A%0A%0ASORT()%09%09%09Sorts the results. Entries can be keynames (include system-defined ones, see below)%0Aor flags, with multiple keys separated by semicolon or newline.%0A%0ASORT(%0A%0A%5B key name %5D%09%09Sorts by the value of the given key. Default is alphabetical.%0A%0A-num or -n  %09%09Sorts the results numerically if possible.%0AThe default sort is alphabetical.%0A%0A-timestamp or -t  %09Sort by timestamp%0A%0A-reverse or -r %09%09Reverses the sort order. Applicable to any of the above.%0A%0A)%0A%0ANote that system-assigned keys are also available:%0A%0A%0A%0A%0AExample:%0ASORT(title -reverse)%0A%0ALIMIT()%09%09%09Limits the output to the specified number of results.%0ALimit is applied after SORT().%0A%0AExample:%0ALIMIT(30)%0AWill only show 30 results of nodes with the specified INCLUDE()/EXCLUDE() parameters.%0A%0A%0ALIST()%09%09%09This is the default output if no other is specified. %0AIt outputs a list of (unique) nodes specified by the combination of INCLUDE() with EXCLUDE(). %0ATo see instead a tree representation of each node and its descendants, if any, provide a level of depth as%0Aa parameter. Example: LIST(5). %0A%0ATo show unlimited depth (until recursion, if it occurs), use the asterisk: LIST(*)%0A%0ACOLLECT()%09%09Aggregates occurrences of metadata, including timestamps, and surrounding contents.%0AAccepts key/value pais %0AReturns a seperate item for each occurence.%0A%0AExample:%0ACOLLECT(timestamp=*)%0A%0A%0ASHOW()%09%09%09Supplies a template for the output of each result. %0AAccepts keynames, denoted with    , arbitrary text, and Unicode characters including %5Cn, %5Cr, %5Ct.%0A%0AWords preceded by     are are evaluated as metadata keys, replaced in the output by their value(s).%0ANote that key names themselves are not displayed in the output. Add keynames manually if you want them included.%0A%0AExample:%0ASHOW(Author: $author, Date: $date%5Cn)%0A%0AIn addition to all user-defined metadata keys, the following tokens are included:%0A%0ASHOW(%0A%0A$title %0ADisplays the node title, default or via the         meta key%0A%0A$link%0ADisplays a link to the node%0A%0A$date %0ADisplays the node's date in the project's default timestamp format%0A%0A$meta%0AShorthand to show all metadata for every node, formatted as by %22consolidate metadata%22%0A%0A$contents:120%0ADisplays the contents of the node. Optional excerpt/length specifier after the colon%0A)%0A%0AHEADER()%09%09Adds additional arbitrary/freeform text to the beginning of the output. This can include any syntax %0Avalid inside Urtext nodes, including metadata.%0A%0AFOOTER()%09%09Adds additional arbitrary/freeform text to the end of the output. Same as for HEADER().%0A%0AMARKDOWN()%09%09Outputs a Markdown representaion of the node(s) into another node or into an external file.%0AWill include all hierarchically nested nodes using Markdown heading format.%0ASee FORMAT() for ways to preformat the output.%0A%0AAccepts one or more semicolon- or newline-separated links to nodes or files (see %7C Linking to outside %0Aresources %3E00q)%0A%0ATo include all nodes pointed to from the root file, recursively, use the flag:%0A%0A%0AHTML()%09%09%09As for MARKDOWN(), but outputs as HTML.%0A%0APLAINTEXT()%09%09As for MARKDOWN(), but outputs Plaintext (Urtext syntax stripped out, %0Aincluding metadata and dynamic definitions.)%0A%0ACan be used, for instance, to export a node or nodes to a non-Urtext text file.%0A%0AFORMAT()%09%09Specificies additional global formatting of the output. There are intended primarily for formatting %0Aexported text, but can be applied to any output. Accepts one or more predefined flags:%0A%0A-preformat or -pre%0AWraps preformatted text (trees, etc.) in backticks to preserve preformatting, %0Afor instance, for Markdown contenxts.%0A%0A-multiline_meta or -mm%0APlaces dynamic node metadata on separate lines instead of separated by;%0A%0A-indent: or -i%0AIndents the dynamic node by the number of spaces specified in parentheses.%0AExample: FORMAT(-indent:20)%0A%0A%5D%5D%0A%7C Sublime Text Key Bindings and Operations %3E1vs%0A%0A## Reference%0A%0A%0A### Projects%0A%0AAn Urtext project is a single folder. The folder must contain at least file with an Urtext Node ID.%0A%0ATo make an new empty project:%0A%0A- make a new folder and open the folder in Sublime Text. %0A- Select Urtext : Initialize Project from the Sublime Command Palette. %0A- The folder how has one Urtext file and a           folder for tracking edits. (See %7C History %3Eprp )%0A%0A#### Using/Adding Existing Files%0A%0AOnce a folder contains at least one file with a node ID, you can add and use existing plaintext files in the project without any modification. However for most of the benefits of Urtext you must minimally an ID (%7C Node IDs %3E01q) in each file.%0A%0ATo do so, select                           from the Sublime Command palette.%0A%0ANote the append will occur without a confirmation dialog, so if you are just experimenting with this system, consider making a copy of your file folder so you can revert without having to manually remove the metadata.%0A%0A%0A### Nodes%0A%0AA node is region, or set of regions, of a file, up to and including the entire file. %0AA file is itself a node. %0AAll nodes can contain other nodes.%0A%0AThe identity of an Urtext node persists no matter its containing filename. This is accomplished by assigning each node a three-character identifier using alpha-numeric characters, providing over 46,000 possible nodes per project. See %7C Node IDs %3E01q for more information.%0A%0AUrtext generates IDs automatically on creation of new nodes. ID's can be changed without affecting functionality, though links must then be manually updated as well. %0A%0AIt is possible to use files containing no IDs in an Urtext project, but then most of the features of Urtext are lost.%0A%0A#### Types of Nodes%0A%0A%0A%0A##### File Nodes%0A%0AThe most basic node is a single file. It may or may not contain other nodes nested inside it.%0A%0ATo create a new file-level node: %7C New Node: ctrl + shift + ; %3Eve3. A new file is created and named automatically. It contains a single node ID and (by default) a creation timestamp.%0A%0A%0A##### Bracket Nodes                                                       %0A%0ANodes can be nested arbitrarily deep inside other nodes, whether the parent node is a file or another bracket node. For all purposes in Urtext, bracket nodes' identities are unique from their containing files, parent nodes, and child nodes.   %0A%0AThe syntax for bracket nodes is to wrap the content in curly braces:%0A%0A###### Example Bracket NodeCreate an bracket nodes with %7C Insert Inline Node: %3Erzx. Inside the inserted double curly braces is a new node with an auto-generated ID.   %0A%0ATo wrap existing content into an bracket node, first select the content and use the same keypress.%0A%0AWhen syntax highlighting is active, bracket node wrappers are tinted to showing nesting level:%0A%0A###### Example first level%0A%0A####### second level%0A%0A######## third test level%0A%0A######### fourth level%0A%0A########## fifth level(The following metadata excludes this example from the Table of Contents tree. See %5B MISSING LINK : v7r %5D  for information)(For Markdown export, a screenshot is provided showing indentation and highlighting:) %5B./files/node-nesting-example.png%5D(./files/node-nesting-example.png)%0A%0ANote that every opening curly bracket must be closed in the same file. Every node requires an ID between its opening and closing brackets. Nodes at the file level (%7C File Nodes %3Eekz) do not use curly-braces, as their region boundaries are the file itself.%0A%0A###### Escaping Curly Brackets%0A%0AIf you need to use curly brackets in your text, you can escape the Urtext syntax by preceding the bracket with a backward slash; this will prevent them from being parsed: %5C%7B %5C%7D%0A%0ATo ignore syntax elements more globally, and/or to embed other syntaxes that use Urtext characters, such as JSON, PHP, and JavaScript, see %5B MISSING LINK : oy5 %5D %0A%0A%0A##### Compact Nodes%0A%0AKey: %7C Insert Compact Node: %3E1qq%0A%0AFor text content requiring only a single line, such as list items, very short notes and similar, use the caret character (   ) as the first non-whitesoace character on a new line. This defines a new node as a child of the node in which the character appears, with the closing wrapper being the end of the same line. %0A%0ALike all nodes, a compact node requires an ID. Like all nodes, it can contain metadata and even inline nodes, as long as the entire contents, including wrappers and metadata, are contained on a single line. (Note that %22line%22 in this case refers to consecutive characters between explicit line breaks, and not to lines in the editor, which may be arbitrarily wrapped.)%0A%0A###### Example Compact Node%0A%0A####### Example inline node within compact node.%5B./files/example-compact-node.png%5D(./files/example-compact-node.png)%0A%0A#### Node Titles%0A%0ABy default, the full first non-whitespace line of any node is the node's title. This can be overridden using the         metadata key or by following the desired text with the underscore (   ) character as used in this document.%0A%0A%0A### Dynamic Nodes%0A%0ADynamic nodes contain content aggregated from the contents of other nodes. Dynamic content stays up to date with its source content %22dynamically%22 (on file save). A dynamic node can be seen as a %22view into%22 other content.%0A%0A#### Dynamic Definitions%0A%0ADynamic nodes are created using a Dynamic Definition. Dynamic Definitions are specified with double square brackets , and have there own syntax, including scoping and highlighting. Dynamic definitions can query, sort, filter, and format the output of nodes in a variety of ways, making them adaptable to many purposes. This section illustrates some example uses of dynamic nodes. It will be helpful to reference %7C Dynamic Definitions : Syntax and Parameters %3E87g.%0A%0ADynamic Definitions can be written anywhere; it is not necessary to store the definition in the same file to which it refers. (Note that they cannot, however, be stored in the node they target, since they would overwrite themselves.)%0A%0AThe key %7C Insert Dynamic Definition with Node:                    %3Ejsc creates a new dynamic definition in Sublime, auto-populated with a corresponding empty inline node. You can also write a definition manually, providing the ID of an existing node. For example, if you want the contents to replace an existing node, assign this key the value of that node's ID. If you want it to populate new inline node, create that node and then copy/paste its ID. Note that Dynamic Definitions do not create their target nodes automatically ; the target node must exist, or the definition will have no effect.There are two main kinds of dynamic output, Lists and Collections:%0A%0A%22Lists%22 are lists of nodes, with each node displayed not more than once. Lists can optionally expand into trees, showing the hierarchy of nested relationships from each root node in the list.%0A%0A%0A%0A#### Lists%0A%0A##### Example: Nodes from the Documentation%0A%0Aproject_settings %3E8p4%0ATemplating the Output with the SHOW parameter %3E8p5%0AGenerated automatically in a dynamic node, contains a link to the node containing the definition. %3E5cq%0AList Projects: %3Eg5a%0ATimestamps %3E2i4%0ALinks %3E0y2%0ABasic Syntax %3Eznj%0AInsert Dynamic Definition with Node: %3Ejsc%0AFull Text Search %3E4p9%0AHome Node: %3E5ab%0ACopy Link to this Node With Title: %3E05x%0ANodes Excluded from the Table of Contents %3Ejkl%0ACopy Link to this Node: %3Evel%0AComparison To Other Tools %3Eh8z%0AToggle History Traverse: %3Endc%0ANew Node: ctrl + shift + ; %3Eve3%0ADynamic Definitions : Syntax and Parameters %3E87g%0AExample Bracket Node %3Eywi%0ATime Zones %3E7w6%0ACase-sensitivity %3El36%0A((%3Etwz:7))%5B./files/example-list-1-definition.png%5D(./files/example-list-1-definition.png)%0A%5B./files/example-list-1.png%5D(./files/example-list-1.png)%0A%0ANote that the at the bottom of the node is the reserved key       which refers to the node containing the definition.%0A%0ALists can be expanded into trees that show the outline of many nodes across many files at any specified depth, up to. In fact, a list is a tree with depth 1.%0A%0A%7C Trees %3E%3Ew8u%0A%0A%22Collections%22 aggregate metadata entries with their context; the same node may appear many times in a collection if it contains many metadata entries matching the queried parameters.%0A%0A%7C Collections %3E%3E00k%0A%0A%0A### Links and Pointers%0A%0A#### Links %0A%0ATo make a %22hyperlink%22 from one node to another, use the right angle bracket (%3E) followed immediately by a node ID. Linking does not require a filename or any other information, only the node ID. Any other surrounding text is ignored.%0A%0A##### Sublime Text tools to help with linking %0A%0A%0ATwo Sublime Command Palette commands can make linking quick and easy:%0A%0AUrtext : Link To ...%0ALinks from the currently viewed node to another node which you can select in the selection panel. When you select a node in the quick panel, a link to that node will be inserted at the cursor.%0A%0AUrtext: Link From ...%0ALinks TO the current node FROM another node. When you select this command, a link to the current node will be copied to the clipboard. You can then paste the reference into the node you open in the quick panel.%0A%0A#### Dynamic Titles%0A%0APrepending a pipe character to any node link will populate the space between the pipe and link with the node's title, from its metadata or default title. Examples are found throughout this documentation. Titled links are updated at the single file level whenever the file is saved.%0A%0A#### Opening Links%0A%0A##### Sublime%0AKey : %7C Open Urtext Link: %3Engh on a line containing a link to open the node with the linked ID. If the link is to an inline node, Sublime will scroll to and center its starting point.%0A%0A##### Pythonista %0A%0AUse the     botton when the cursor is on any line containing a link.Note that Urtext reads node regions on every save, so cursor location may be imprecise if the file has been altered since the last save.%0A%0A#### Linking to Files and Other Resources%0A%0A##### Web / HTTP(S)%0A%0AHTTP(S) links are recognized automatically and will open in the default browser.    %0AExample: pressing %7C Open Urtext Link: %3Engh on this line will open the link: http://github.com%0A%0A##### Files%0A%0ALinks to files can be made by writing     , followed immediately with a file path relative to the folder of the project:%0AExample: %5BREADME.md%5D(README.md)%0A%7C  ?  %3E%3Elmu%0A%0A%0A### Exporting%0AUrtext can export to plaintext, Markdown and HTML. Output can be written to a file or back into another node in the project. Exporting is dynamic; when changes are made to the source files, exports are immediately updated.%0A%0A#### Example : Urtext Documentation Exported in Markdown to a File%0A%0AThis dynamic definition exports the entire documentation from its root node %7C Urtext  Version: 1.0-alpha  Usage Guide and References %3Ea5m ) in Markdown format to a file called %5B./README.md:%5D(./README.md:)%0A%0A%0A%5B MISSING LINK : l0i %5D %0A%0A#### Example : Fragment Exported to HTML%0A%0AThe following Dynamic Definition is identical to the above, except it exports to HTML.%0A%0A%0A### File Naming                                                                                %0A%0ASince node identities are independent of their filenames, you can use any naming convention you want. Urtext can also rename files automatically in convenient formats based on their title and/or index. Renaming by index is useful, for instance, if you want file-level nodes easily readable inside a file system, mobile app, or other file browser.%0A%0ATo rename a file, select %22Rename File from Meta%22 from the command palette (Command-P). This will rename the file in one of the following schema:%0A%0AIf an index is present:%0A%0A.txt%0A%0AIf no index is present:%0A%0A.txt%0A%0AThis system preserves automatic numerical sorting within the filesystem, such that the most recent un-indexed nodes appear first. If you want to use another system, such as putting the title first, you can do so.%0A%0A%0A### History%0A%0AThough use of powerful version control tools (such as Git, Mercurial, etc.) is possible, Urtext has a lighter built-in versioning system that tracks edits at intervals. It is not necessary to make explicit %22commits%22 in order to utilize this. Urtext creates a single, linear history of each file's content, with each snapshot being a %22diff%22, or record of changes, since the previous snapshot. When a previous state is restored, no %22checkout%22 or %22rewind%22 occurs; rather, the newly restored state is appended to the history. Therefore, in addition to functioning as version control, the feature can also be used as an infinite and non-destructive %22undo/redo%22 editing history that saves state when the file is closed. The default interval is 10 seconds, and can be modified in project_settings. %0A%0ATo access a file's history, use %7C Toggle History Traverse: %3Endc.%0A%0AHistories are stored in the /history folder inside the project, as .pkl (%22pickle%22) files. This folder requires no user involvement. If using another version control tool such as Git, you may wish to add the /history folder to your .gitignore file, so that only explicitly committed versions of your project are visible in distributed repositories.%0A%0A%0A### This node now has special reserved metadata keys that will be parsed as follows:%0Aimestamp%0A%0A%0A### Errors and Warnings%0A%0A%0A### Using Multiple Projects%0A%0ATo use multiple projects at once, there is a project context manager. When you initially pass a path to Urtext, it looks recursively in all sub folders for additional projects. If it finds a compilable Urtext project in any one, it adds these to the context manager.  You can then freely switch among projects, either explicitly, or using links between the projects (described below). When switching projects, all Urtext's features, content and behavior, including links, compiling, and all functions linked to UI buttons, will operate in the context of the selected project. %0A%0AYou can put all your Urtext projects into sub folders of a single path. Alternatively, you may put them anyplace in the file system and choose as your Urtext root a folder that encompasses them all. Compiling may take longer if Urtext has to search through many unused directories. %0A%0AUsing Python, it is possible to only instantiate a single project, without the context manager. The current implementations in Sublime and Pythonista, however, use the context manager by default, even if you are only using a single project.%0A%0ARecall that what defines a project is a folder. This is also what separates it from other projects. If you add other Urtext project folders into the initial path, they will all be accessible from the same project list.%0A%0ATo switch between projects in Sublime, select Urtext: Select Project from the command palette.%0AIn Pythonista, use %22Switch Projects%22 from the feature menu.%0A%0A#### Project Naming (Identification)%0A%0AUnlike nodes, projects are uniquely identified by name. For this reason, each project must have an unique name within the running instance of Urtext. Projects can be named using the project_title key in the project's project_settings node. If no name is present, the project's name becomes its absolute path in the file system.%0A%0A#### Cross-Project Linking%0A%0AYou may also link from one project to another within the text. To so this, use the following syntax:%0A%0A=%3E%22name or path of the other project%5B MISSING LINK : idj %5D %0A(This link is only an example and is non-functioning)%0A%0AFollowing this link will change the project context to the named project and open its specified node.%0A%0A%0A### User Interface Elements%0A%0AUrtext is made to require minimal user interface elements. They mostly serve as conveniences that duplicate %0A%0A%0A%0A#### The Node Browser%0A%0AThe Node browser shows a list of all nodes in the project. It can be implemented in plaintext using a dynamic definition such as: . However, %0A%0Aalso be implemented %0A%0AOpening the Node List%0A%0ACtrl-Shift-E %0A%0A%0A%0A%0AIn Sublime Text there is also the alternative of using the UI dropdown. Press Control-Shift-E or select %22Urtext: Node List%22 from the Sublime command palette (Shift-Super-P). Here you can find a node by typing part of its title.%0A%0AIn the Node List, nodes are sorted by their time of creation, with most recent first. They can also be sorted by index (see %7C  ?  %3E00z).%0A%0A%0A#### Traverse Mode   %0A%0A%0A%0AThis feature is currently implemented in Sublime Text only.%0A%0AYou can navigate a node tree or list of nodes by turning on Traverse mode (Shift-Ctrl-R). This will open another pane next to the one you are currently in. As you navigate the nodeview in the left side with the cursor or mouse, the selected node shows on the right. Use Sublime's Focus Group navigation keys, or the mouse, to switch between left and right panes.%0A%0AToggle Traverse Mode off by pressing Shift-Ctrl-R again. The status bar at the bottom of the Sublime window indicates whether Traverse is on or off. %0A%0ANote that if Traverse mode is off, you can also open a link manually (Shift-Ctrl-/) as normal. %0A%0AThis feature is not built into Urtext; it is a feature of the Sublime package only.%0A%0A##### Word Wrap in Traverse Mode%0A%0ASince Traverse Mode splits the window into two or more panes, it is suggested to set Word Wrap Column to %22Auto%22 in Sublime Settings. This will cause the edited views to wrap correctly no matter the screen or window/pane size, as well as in Sublime's Distraction Free Mode.%0A%0AWhenever Traverse Mode is enabled on a view, word wrap for that view is turned off altogether to prevent awkward wrapping of trees. It is restored when Traverse Mode is turned off.%0A%0A## About Urtext%0A%0A### Description%0A%0AUrtext is a syntax and interpreter for writing, connecting and organizing text.%0A%0AUrtext's basic unit is a %22node%22, which is a range or set of ranges of text within a file. A folder of nodes is a %22project%22. The Urtext interpreter is aware of all the nodes in a project at once, so nodes can reference, modify, and organize one another, across hundreds or thousands of files. The %7C Basic Syntax %3Eznj permits instructions embedded into the text itself. %0A%0AThe present interpreter for Urtext is in Python and can be used wherever Python 3.3 or later runs. Equivalent or variant interpreters could be created in any language or editing environment. %0A%0AUrtext has no built-in user interface; it only compiles and manages the files. Using Urtext requires an implementation within a text editor or text view, with a wrapper to pass messages between back and forth. Currently there is a package for Sublime Text (Mac/Windows/Linux) and a script for Pythonista (iOS).%0A%0A### Comparison To Other Tools%0A%0AUrtext shares some characteristics with markup languages such as Markdown and LaTeX, with the important difference that it is author-facing, rather than reader-facing. It is not primarily a document conversion or document generation tool, though it can export to some other formats (currently Markdown and HTML). %0A%0AUrtext's syntax combines content, structure and instructions all together. Unlike HTML or other markup languages, there is no additional code or markup %22behind%22 the visible syntax. Everything the interpreter reads is visible to the user.%0A%0A### Uses%0A%0AIncluding but not limited to:%0A%0A- prose writing%0A- research%0A- documentation%0A- knowledge/information base%0A- journaling%0A- Zettelkasten%0A- project/personal organization%0A- notetaking%0A- lightweight database%0A- any other writing or information management that can be done in text form%0A%0A### Features and Philosophy%0A%0A#### Plain Text%0A%0APlaintext is fast, human-readable, flexible, cross-platform, device-portable, and future-proof. It can be easily diffed and version-controlled (using Git, for example). Using theming and syntax highlighting, the text forms its own user interface without relying on graphic elements.%0A%0AIt can also incorporate (embed) other plaintext syntaxes, including other markup languages and other programming language syntaxes.%0A%0A#### Freeform, Flexible Syntax%0A%0AUrtext is like an inverse programming language. Whereas most programming languages provide a %22comment%22 syntax to insert freeform text around the code, Urtext works the opposite way: all content is text unless it matches syntax for structural or instructional code.%0A%0AText can be supplemented with user-defined metadata independent of the file system's metadata (datetime stamps, comments, etc.). It can even be used as a flat-file database.%0A%0ASimilar to code projects, an Urtext project can be spread across dozens or thousands of files, with individual files providing %22routes%22, or connections, to other other files or parts of files (nodes) via their node IDs. Text elements can be linked in tree-like, recursive (tangled), and other non-hierarchical ways.%0A%0AHowever, the basics are very simple, and you can use only the parts you need.%0A%0A#### Open source%0A%0A- Usable across multiple platforms and devices.%0A%0A- Decoupled from any particular text editor or interface ; it can be incorporated into any environment that runs Python, including any scriptable text editor or Python-scriptable environment capable of displaying a text editing view.%0A%0A#### Extensibile%0A%0AUrtext Actions, Directives, and ___ all inherit from base classes that can be user-extended to add or modify functionality limited only by the power of the Python language. %0A%0AAt present these features are undocumented, but can be understood if you know Python by reading the code.%0A%0A#### Future Proof%0A%0ANo reliance on anything that may not exist in 5 or 1000 years. %0A%0AThe interpreter/compiler could be implemented in any sufficiently capable language, current, past or future.%0A%0A#### Local%0A%0AThe Urtext parser is made primarily to operate on files present locally on the device. It is not dependent on a cloud or other subscription service. %0A%0ACloud services can be used to sync project files among devices if desired.%0A%0A#### Other Features%0A%0AUrtext is designed to make direct interaction with file system mostly unnecessary. Creating, naming, saving, and organizing files is handled for you.((%3Ea5m:178)) @k06\n", "1632753915": "@@ -1,33834 +0,0 @@\n- %0A%0A# Urtext %0AUsage Guide and References%0A%0A%0A%0A## About Urtext%0A%0A### Description%0A%0AUrtext is a syntax and interpreter for writing, connecting and organizing text.%0A%0AUrtext's basic unit is a %22node%22, which is a range or set of ranges of text within a file. A folder of nodes is a %22project%22. The Urtext interpreter is aware of all the nodes in a project at once, so nodes can reference, modify, and organize one another, across hundreds or thousands of files. The %7C Basic Syntax %3Eznj permits instructions embedded into the text itself. %0A%0AThe present interpreter for Urtext is in Python and can be used wherever Python 3.3 or later runs. Equivalent or variant interpreters could be created in any language or editing environment. %0A%0AUrtext has no built-in user interface; it only compiles and manages the files. Using Urtext requires an implementation within a text editor or text view, with a wrapper to pass messages between back and forth. Currently there is a package for Sublime Text (Mac/Windows/Linux) and a script for Pythonista (iOS).%0A%0A### Comparison To Other Tools%0A%0AUrtext shares some characteristics with markup languages such as Markdown and LaTeX, with the important difference that it is author-facing, rather than reader-facing. It is not primarily a document conversion or document generation tool, though it can export to some other formats (currently Markdown and HTML). %0A%0AUrtext's syntax combines content, structure and instructions all together. Unlike HTML or other markup languages, there is no additional code or markup %22behind%22 the visible syntax. Everything the interpreter reads is visible to the user.%0A%0A### Uses%0A%0AIncluding but not limited to:%0A%0A- prose writing%0A- research%0A- documentation%0A- knowledge/information base%0A- journaling%0A- Zettelkasten%0A- project/personal organization%0A- notetaking%0A- lightweight database%0A- any other writing or information management that can be done in text form%0A%0A### Features and Philosophy%0A%0A#### Plain Text%0A%0APlaintext is fast, human-readable, flexible, cross-platform, device-portable, and future-proof. It can be easily diffed and version-controlled (using Git, for example). Using theming and syntax highlighting, the text forms its own user interface without relying on graphic elements.%0A%0AIt can also incorporate (embed) other plaintext syntaxes, including other markup languages and other programming language syntaxes.%0A%0A#### Freeform, Flexible Syntax%0A%0AUrtext is like an inverse programming language. Whereas most programming languages provide a %22comment%22 syntax to insert freeform text around the code, Urtext works the opposite way: all content is text unless it matches syntax for structural or instructional code.%0A%0AText can be supplemented with user-defined metadata independent of the file system's metadata (datetime stamps, comments, etc.). It can even be used as a flat-file database.%0A%0ASimilar to code projects, an Urtext project can be spread across dozens or thousands of files, with individual files providing %22routes%22, or connections, to other other files or parts of files (nodes) via their node IDs. Text elements can be linked in tree-like, recursive (tangled), and other non-hierarchical ways.%0A%0AHowever, the basics are very simple, and you can use only the parts you need.%0A%0A#### Open source%0A%0A- Usable across multiple platforms and devices.%0A%0A- Decoupled from any particular text editor or interface ; it can be incorporated into any environment that runs Python, including any scriptable text editor or Python-scriptable environment capable of displaying a text editing view.%0A%0A#### Extensibile%0A%0AUrtext Actions, Directives, and ___ all inherit from base classes that can be user-extended to add or modify functionality limited only by the power of the Python language. %0A%0AAt present these features are undocumented, but can be understood if you know Python by reading the code.%0A%0A#### Future Proof%0A%0ANo reliance on anything that may not exist in 5 or 1000 years. %0A%0AThe interpreter/compiler could be implemented in any sufficiently capable language, current, past or future.%0A%0A#### Local%0A%0AThe Urtext parser is made primarily to operate on files present locally on the device. It is not dependent on a cloud or other subscription service. %0A%0ACloud services can be used to sync project files among devices if desired.%0A%0A#### Other Features%0A%0AUrtext is designed to make direct interaction with file system mostly unnecessary. Creating, naming, saving, and organizing files is handled for you.%0A%0A## About This Documentation%0A%0AThis is a documentation of Urtext written in Urtext.             was exported from the text files in this repository. Clone or download the repository to use it as both reference and example project. %0A%0AThis documentation is in active development. It may be incomplete or behind features/functionality of Urtext. Edits and revisions are encouraged in the form of issues and pull requests (https://github.com/nbeversl/urtext-docs/pulls, https://github.com/nbeversl/urtext-docs/issues).%0A%0AMany of the examples rely on syntax and formatting that are stripped out in export to Markdown. These are replaced with screenshots as necessary (see %7C Linking to Files and Other Resources %3E00q and %7C Exporting %3Eezg)%0A%0AInside an Urtext implementation, such as the Sublime Text with the Urtext package, you can navigate the project directly. Most of the key commands utilize Control-Shift as the modifier. %0A%0A- Control-Shift-/ to follow any link%0A- Control-Shift-H at any time to return to this %22home%22 node. %0A- View the readme: %5Breadme.md ;%5D(readme.md ;)%0A%0A## Quick Start, Guides and Examples %3Ez7t%0A  %E2%94%9C%E2%94%80%E2%94%80 Installation and Setup (Sublime Text / Desktop) %3E6cd%0A  %E2%94%9C%E2%94%80%E2%94%80 Basic Syntax %3Eznj%0A  %E2%94%94%E2%94%80%E2%94%80 Dynamic Definitions : Syntax and Parameters %3E87g%0AReference %3Eac5%0A  %E2%94%9C%E2%94%80%E2%94%80 Projects %3Edce%0A  %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Using/Adding Existing Files %3Erij%0A  %E2%94%9C%E2%94%80%E2%94%80 Nodes %3E01j%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Types of Nodes %3E07q%0A  %E2%94%82   %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 File Nodes %3Eekz%0A  %E2%94%82   %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Bracket Nodes %3E004%0A  %E2%94%82   %E2%94%82   %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Example Bracket Node %3Eywi%0A  %E2%94%82   %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Escaping Curly Brackets %3E8a8%0A  %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Compact Nodes %3Ekpz%0A  %E2%94%82   %E2%94%82       %E2%94%9C%E2%94%80%E2%94%80 Example Compact Node %3Ed7b%0A  %E2%94%82   %E2%94%82       %E2%94%94%E2%94%80%E2%94%80 Example inline node within compact node. %3E9up%0A  %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Node Titles %3Eue2%0A  %E2%94%9C%E2%94%80%E2%94%80 Dynamic Nodes %3Ek8p%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Dynamic Definitions %3E07u%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Lists %3Etwz%0A  %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Example: Nodes from the Documentation %3Em1r%0A  %E2%94%9C%E2%94%80%E2%94%80 Links and Pointers %3E00j%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Links %3E0y2%0A  %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Sublime Text tools to help with linking %3E00m%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Dynamic Titles %3E4vu%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Opening Links %3E01w%0A  %E2%94%82   %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Sublime %3Eosu%0A  %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Pythonista %3Eiy8%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Linking to Files and Other Resources %3E00q%0A  %E2%94%82   %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Web / HTTP(S) %3E00o%0A  %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Files %3E00p%0A  %E2%94%9C%E2%94%80%E2%94%80 Exporting %3Eezg%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Example : Urtext Documentation Exported in Markdown to a File %3Em9d%0A  %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Example : Fragment Exported to HTML %3Ebaq%0A  %E2%94%9C%E2%94%80%E2%94%80 File Naming %3E01m%0A  %E2%94%9C%E2%94%80%E2%94%80 History %3Eprp%0A  %E2%94%9C%E2%94%80%E2%94%80 This node now has special reserved metadata keys that will be parsed as follows: %3E00l%0A  %E2%94%9C%E2%94%80%E2%94%80 Errors and Warnings %3Ebpk%0A  %E2%94%9C%E2%94%80%E2%94%80 Using Multiple Projects %3Eipy%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Project Naming (Identification) %3Etgp%0A  %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Cross-Project Linking %3E7lx%0A  %E2%94%94%E2%94%80%E2%94%80 User Interface Elements %3E3n6%0A      %E2%94%9C%E2%94%80%E2%94%80 The Node Browser %3E01i%0A      %E2%94%94%E2%94%80%E2%94%80 Traverse Mode %3E00w%0A          %E2%94%94%E2%94%80%E2%94%80 Word Wrap in Traverse Mode %3Exci%0AAbout This Documentation %3Ep23%0Aflags=exclude_from_export%0A((%3Ea5m:81))%0A%0A## Quick Start, Guides and Examples%0A%0A%0A### Installation and Setup (Sublime Text / Desktop)%0A%0AFor desktop use (PC/Mac/Linux) Urtext is implemented in Sublime Text.%0A%0A1. Download Sublime Text. (https://www.sublimetext.com/).%0A%0A2. Download Urtext and all its dependencies from the monorepo at                                          . You can either download this repository as a .ZIP file and unzip it, or if you want to maintain version control, use                                                                         . Put the contents of the cloned/unzipped folder (important: not the folder itself) directly into your                                folder.%0A%0A3. Download the Sublime Urtext package at                                             . Place it in your Packages folder (Sublime Text 3/Packages)%0A%0A4. Clone/download this documentation repository and open its folder in Sublime. It will automatically be read as an Urtext project.%0A%0AOnce the Sublime package is installed, it will always look for any files with the .txt extension in open folders and attempt to compile them into a project. To open an existing Urtext project, open the folder, a file in the folder, or a Sublime project that includes the folder, and any feature described in this documentation will work.%0A%0ATo make a new project, open an empty folder and select Select                               from the Sublime Command Palette. For more information, see %7C Projects %3Edce.%0A%0A%0A### Basic Syntax%0A%0AAll text is plain content unless inside a timestamp wrapper, dynamic definition wrapper, or preceded by a metadata assignment operator and keyname.%0A%0A%0ABracket Node Wrappers. Can appear anywhere. Can be nested aribrarily deep.%0AMore information: %7C Bracket Nodes %3E004%0A%0A%0ANode Link. Links to the specified node by ID, like a hyperlink. %0AMore information: %7C Links %3E0y2%0A%0A%0ANode Pointer: Embeds the specified node as though it were included bracket using wrappers       (see above)%0AMore information: %5B MISSING LINK : lmu %5D %0A%0A%0ATitle Pipe. Placed immediately before a node link or node pointer (whitespace is ok), dynamically populates the linked node title.%0AExample and more info: %7C Dynamic Titles %3E4vu%0A%0A%0ABullet Node marker. Must be the first non-whitespace character on a line. Must include an ID in order to parse as a node.%0AMore information: %7C Bullet Nodes %3Ej6t%0A%0A%0ATimestamp wrapper. Parses user-defined datetime strings, with many default formats built in.%0AThe first character inside the brackets may not be    , '-', or whitespace.%0AExample: %0AMore information: %7C Syntax and Format %3E005%0A%0A%0AMetadata assignment operator. Accepts a user-defined key on the left, and values and timestamps on the right.%0AMetadata may appear anywhere. They attach to their containing (parent) node, remember their exact location, and can serve as anchors/bookmarks to context. Keys must be single words (underscore permitted), values may be any characters, terminated with a semicolon or newline. The pipe character (   ) separates multiple values for a single key.%0AExample:%0A%0A%0A### Dynamic Definitions : Syntax and Parameters%0A%0ADynamic definitions are instructions for dynamically building nodes from other nodes. Definitions can be written anywhere; it is not necessary to store a definition in the same file to which it refers. (Definitions cannot, however, be stored in the node they target, since they would overwrite themselves.)%0A%0ADynamic definitions are wrapped with double left and right square brackets(    ,    ). There are no restrictions on spacing, indentation, newlines, or other arbitrary text or whitespace. The order of parameters within a definition is unimportant; they are evaluated as a group.%0A%0AThis dynamic definition below is for documentation and does not actually do anything. It rather lists every parameter along with an explanation of its use and purpose. For example uses, see %7C Dynamic Nodes %3Ek8p%0A%0A%0A%5B%5B %09ID() %09%09%09Target node to dynamically populate with output.%0AAccepts a link to a node %5B MISSING LINK : eee %5D )%0A%0AINCLUDE()  %09%09Nodes to include. Accepts one or more key/value pairs and optional parameters.%0Aor +()%0AComparisons:%0A%0Ameans equal to%0AINCLUDE(key = value)%09%0AIncludes all nodes with the given key containing the given value%0A%0Ameans %22contains%22%0AINCLUDE(_contents ? some text or content)%0AIncludes all nodes containing %22some text or content%22 in their text contents.%0A(See also -search)%0A%0Ameans %22anything%22%0AINCLUDE(index = *)%0AIncludes all nodes containing the key        %0A%0AUse semicolon or newline to separate entries, as everywhere in Urtext.%0A%0AAdditional Flags:%0A%0AAdditional flags can be included in %0A%0AINCLUDE(*) or +(*)%0AIncludes all nodes in the project%09%09%09%09%09%09%09%09%09%0A%0Aor     %0AINCLUDE(-all_projects) or +(*p)%0AExpands included nodes to include all projects in the project list.%0A%0A%0AIncludes all nodes that contain only whitespace as their content%0A%0ANote these additional flags substitute for semicolons/newlines as separators between entries.%0A%0ASystem keys%0A%0AUrtext includes some built-in keys whose values are generated automatically. %0AThese may also be used in INCLUDE(): %0A%0A%0AINCLUDE(_links_to = 46d)%0AIncludes all nodes that contain links to node ID      %0A%0A%0AINCLUDE(_links_from = 46d)%0AIncludes all nodes to which node ID       links%0A%0A: Refers to a node's text contents. %0ACan be used, for instance, for full text search or comparison.%0AINCLUDE(_contents ? Western Civilization)%0AIncludes any node that contents the text %22Western Civilization%22%0A(comparisons are case-insensitive)%0A%0AEXCLUDE()%09%09Accepts all the same parameters as INCLUDE()%0Aor -()%09%09%09Always evaluated after INCLUDE(), excludes the specified nodes from the result.%0A%0A%0A%0ASORT()%09%09%09Sorts the results. Entries can be keynames (include system-defined ones, see below)%0Aor flags, with multiple keys separated by semicolon or newline.%0A%0ASORT(%0A%0A%5B key name %5D%09%09Sorts by the value of the given key. Default is alphabetical.%0A%0A-num or -n  %09%09Sorts the results numerically if possible.%0AThe default sort is alphabetical.%0A%0A-timestamp or -t  %09Sort by timestamp%0A%0A-reverse or -r %09%09Reverses the sort order. Applicable to any of the above.%0A%0A)%0A%0ANote that system-assigned keys are also available:%0A%0A%0A%0A%0AExample:%0ASORT(title -reverse)%0A%0ALIMIT()%09%09%09Limits the output to the specified number of results.%0ALimit is applied after SORT().%0A%0AExample:%0ALIMIT(30)%0AWill only show 30 results of nodes with the specified INCLUDE()/EXCLUDE() parameters.%0A%0A%0ALIST()%09%09%09This is the default output if no other is specified. %0AIt outputs a list of (unique) nodes specified by the combination of INCLUDE() with EXCLUDE(). %0ATo see instead a tree representation of each node and its descendants, if any, provide a level of depth as%0Aa parameter. Example: LIST(5). %0A%0ATo show unlimited depth (until recursion, if it occurs), use the asterisk: LIST(*)%0A%0ACOLLECT()%09%09Aggregates occurrences of metadata, including timestamps, and surrounding contents.%0AAccepts key/value pais %0AReturns a seperate item for each occurence.%0A%0AExample:%0ACOLLECT(timestamp=*)%0A%0A%0ASHOW()%09%09%09Supplies a template for the output of each result. %0AAccepts keynames, denoted with    , arbitrary text, and Unicode characters including %5Cn, %5Cr, %5Ct.%0A%0AWords preceded by     are are evaluated as metadata keys, replaced in the output by their value(s).%0ANote that key names themselves are not displayed in the output. Add keynames manually if you want them included.%0A%0AExample:%0ASHOW(Author: $author, Date: $date%5Cn)%0A%0AIn addition to all user-defined metadata keys, the following tokens are included:%0A%0ASHOW(%0A%0A$title %0ADisplays the node title, default or via the         meta key%0A%0A$link%0ADisplays a link to the node%0A%0A$date %0ADisplays the node's date in the project's default timestamp format%0A%0A$meta%0AShorthand to show all metadata for every node, formatted as by %22consolidate metadata%22%0A%0A$contents:120%0ADisplays the contents of the node. Optional excerpt/length specifier after the colon%0A)%0A%0AHEADER()%09%09Adds additional arbitrary/freeform text to the beginning of the output. This can include any syntax %0Avalid inside Urtext nodes, including metadata.%0A%0AFOOTER()%09%09Adds additional arbitrary/freeform text to the end of the output. Same as for HEADER().%0A%0AMARKDOWN()%09%09Outputs a Markdown representaion of the node(s) into another node or into an external file.%0AWill include all hierarchically nested nodes using Markdown heading format.%0ASee FORMAT() for ways to preformat the output.%0A%0AAccepts one or more semicolon- or newline-separated links to nodes or files (see %7C Linking to outside %0Aresources %3E00q)%0A%0ATo include all nodes pointed to from the root file, recursively, use the flag:%0A%0A%0AHTML()%09%09%09As for MARKDOWN(), but outputs as HTML.%0A%0APLAINTEXT()%09%09As for MARKDOWN(), but outputs Plaintext (Urtext syntax stripped out, %0Aincluding metadata and dynamic definitions.)%0A%0ACan be used, for instance, to export a node or nodes to a non-Urtext text file.%0A%0AFORMAT()%09%09Specificies additional global formatting of the output. There are intended primarily for formatting %0Aexported text, but can be applied to any output. Accepts one or more predefined flags:%0A%0A-preformat or -pre%0AWraps preformatted text (trees, etc.) in backticks to preserve preformatting, %0Afor instance, for Markdown contenxts.%0A%0A-multiline_meta or -mm%0APlaces dynamic node metadata on separate lines instead of separated by;%0A%0A-indent: or -i%0AIndents the dynamic node by the number of spaces specified in parentheses.%0AExample: FORMAT(-indent:20)%0A%0A%5D%5D%0A%7C Sublime Text Key Bindings and Operations %3E1vs%0A%0A## Reference%0A%0A%0A### Projects%0A%0AAn Urtext project is a single folder. The folder must contain at least file with an Urtext Node ID.%0A%0ATo make an new empty project:%0A%0A- make a new folder and open the folder in Sublime Text. %0A- Select Urtext : Initialize Project from the Sublime Command Palette. %0A- The folder how has one Urtext file and a           folder for tracking edits. (See %7C History %3Eprp )%0A%0A#### Using/Adding Existing Files%0A%0AOnce a folder contains at least one file with a node ID, you can add and use existing plaintext files in the project without any modification. However for most of the benefits of Urtext you must minimally an ID (%7C Node IDs %3E01q) in each file.%0A%0ATo do so, select                           from the Sublime Command palette.%0A%0ANote the append will occur without a confirmation dialog, so if you are just experimenting with this system, consider making a copy of your file folder so you can revert without having to manually remove the metadata.%0A%0A%0A### Nodes%0A%0AA node is region, or set of regions, of a file, up to and including the entire file. %0AA file is itself a node. %0AAll nodes can contain other nodes.%0A%0AThe identity of an Urtext node persists no matter its containing filename. This is accomplished by assigning each node a three-character identifier using alpha-numeric characters, providing over 46,000 possible nodes per project. See %7C Node IDs %3E01q for more information.%0A%0AUrtext generates IDs automatically on creation of new nodes. ID's can be changed without affecting functionality, though links must then be manually updated as well. %0A%0AIt is possible to use files containing no IDs in an Urtext project, but then most of the features of Urtext are lost.%0A%0A#### Types of Nodes%0A%0A%0A%0A##### File Nodes%0A%0AThe most basic node is a single file. It may or may not contain other nodes nested inside it.%0A%0ATo create a new file-level node: %7C New Node: ctrl + shift + ; %3Eve3. A new file is created and named automatically. It contains a single node ID and (by default) a creation timestamp.%0A%0A%0A##### Bracket Nodes                                                       %0A%0ANodes can be nested arbitrarily deep inside other nodes, whether the parent node is a file or another bracket node. For all purposes in Urtext, bracket nodes' identities are unique from their containing files, parent nodes, and child nodes.   %0A%0AThe syntax for bracket nodes is to wrap the content in curly braces:%0A%0A###### Example Bracket NodeCreate an bracket nodes with %7C Insert Inline Node: %3Erzx. Inside the inserted double curly braces is a new node with an auto-generated ID.   %0A%0ATo wrap existing content into an bracket node, first select the content and use the same keypress.%0A%0AWhen syntax highlighting is active, bracket node wrappers are tinted to showing nesting level:%0A%0A###### Example first level%0A%0A####### second level%0A%0A######## third test level%0A%0A######### fourth level%0A%0A########## fifth level(The following metadata excludes this example from the Table of Contents tree. See %5B MISSING LINK : v7r %5D  for information)(For Markdown export, a screenshot is provided showing indentation and highlighting:) %5B./files/node-nesting-example.png%5D(./files/node-nesting-example.png)%0A%0ANote that every opening curly bracket must be closed in the same file. Every node requires an ID between its opening and closing brackets. Nodes at the file level (%7C File Nodes %3Eekz) do not use curly-braces, as their region boundaries are the file itself.%0A%0A###### Escaping Curly Brackets%0A%0AIf you need to use curly brackets in your text, you can escape the Urtext syntax by preceding the bracket with a backward slash; this will prevent them from being parsed: %5C%7B %5C%7D%0A%0ATo ignore syntax elements more globally, and/or to embed other syntaxes that use Urtext characters, such as JSON, PHP, and JavaScript, see %5B MISSING LINK : oy5 %5D %0A%0A%0A##### Compact Nodes%0A%0AKey: %7C Insert Compact Node: %3E1qq%0A%0AFor text content requiring only a single line, such as list items, very short notes and similar, use the caret character (   ) as the first non-whitesoace character on a new line. This defines a new node as a child of the node in which the character appears, with the closing wrapper being the end of the same line. %0A%0ALike all nodes, a compact node requires an ID. Like all nodes, it can contain metadata and even inline nodes, as long as the entire contents, including wrappers and metadata, are contained on a single line. (Note that %22line%22 in this case refers to consecutive characters between explicit line breaks, and not to lines in the editor, which may be arbitrarily wrapped.)%0A%0A###### Example Compact Node%0A%0A####### Example inline node within compact node.%5B./files/example-compact-node.png%5D(./files/example-compact-node.png)%0A%0A#### Node Titles%0A%0ABy default, the full first non-whitespace line of any node is the node's title. This can be overridden using the         metadata key or by following the desired text with the underscore (   ) character as used in this document.%0A%0A%0A### Dynamic Nodes%0A%0ADynamic nodes contain content aggregated from the contents of other nodes. Dynamic content stays up to date with its source content %22dynamically%22 (on file save). A dynamic node can be seen as a %22view into%22 other content.%0A%0A#### Dynamic Definitions%0A%0ADynamic nodes are created using a Dynamic Definition. Dynamic Definitions are specified with double square brackets , and have there own syntax, including scoping and highlighting. Dynamic definitions can query, sort, filter, and format the output of nodes in a variety of ways, making them adaptable to many purposes. This section illustrates some example uses of dynamic nodes. It will be helpful to reference %7C Dynamic Definitions : Syntax and Parameters %3E87g.%0A%0ADynamic Definitions can be written anywhere; it is not necessary to store the definition in the same file to which it refers. (Note that they cannot, however, be stored in the node they target, since they would overwrite themselves.)%0A%0AThe key %7C Insert Dynamic Definition with Node:                    %3Ejsc creates a new dynamic definition in Sublime, auto-populated with a corresponding empty inline node. You can also write a definition manually, providing the ID of an existing node. For example, if you want the contents to replace an existing node, assign this key the value of that node's ID. If you want it to populate new inline node, create that node and then copy/paste its ID. Note that Dynamic Definitions do not create their target nodes automatically ; the target node must exist, or the definition will have no effect.There are two main kinds of dynamic output, Lists and Collections:%0A%0A%22Lists%22 are lists of nodes, with each node displayed not more than once. Lists can optionally expand into trees, showing the hierarchy of nested relationships from each root node in the list.%0A%0A%0A%0A#### Lists%0A%0A##### Example: Nodes from the Documentation%0A%0Aproject_settings %3E8p4%0ATemplating the Output with the SHOW parameter %3E8p5%0AGenerated automatically in a dynamic node, contains a link to the node containing the definition. %3E5cq%0AList Projects: %3Eg5a%0ATimestamps %3E2i4%0ALinks %3E0y2%0ABasic Syntax %3Eznj%0AInsert Dynamic Definition with Node: %3Ejsc%0AFull Text Search %3E4p9%0AHome Node: %3E5ab%0ACopy Link to this Node With Title: %3E05x%0ANodes Excluded from the Table of Contents %3Ejkl%0ACopy Link to this Node: %3Evel%0AComparison To Other Tools %3Eh8z%0AToggle History Traverse: %3Endc%0ANew Node: ctrl + shift + ; %3Eve3%0ADynamic Definitions : Syntax and Parameters %3E87g%0AExample Bracket Node %3Eywi%0ATime Zones %3E7w6%0ACase-sensitivity %3El36%0A((%3Etwz:7))%5B./files/example-list-1-definition.png%5D(./files/example-list-1-definition.png)%0A%5B./files/example-list-1.png%5D(./files/example-list-1.png)%0A%0ANote that the at the bottom of the node is the reserved key       which refers to the node containing the definition.%0A%0ALists can be expanded into trees that show the outline of many nodes across many files at any specified depth, up to. In fact, a list is a tree with depth 1.%0A%0A%7C Trees %3E%3Ew8u%0A%0A%22Collections%22 aggregate metadata entries with their context; the same node may appear many times in a collection if it contains many metadata entries matching the queried parameters.%0A%0A%7C Collections %3E%3E00k%0A%0A%0A### Links and Pointers%0A%0A#### Links %0A%0ATo make a %22hyperlink%22 from one node to another, use the right angle bracket (%3E) followed immediately by a node ID. Linking does not require a filename or any other information, only the node ID. Any other surrounding text is ignored.%0A%0A##### Sublime Text tools to help with linking %0A%0A%0ATwo Sublime Command Palette commands can make linking quick and easy:%0A%0AUrtext : Link To ...%0ALinks from the currently viewed node to another node which you can select in the selection panel. When you select a node in the quick panel, a link to that node will be inserted at the cursor.%0A%0AUrtext: Link From ...%0ALinks TO the current node FROM another node. When you select this command, a link to the current node will be copied to the clipboard. You can then paste the reference into the node you open in the quick panel.%0A%0A#### Dynamic Titles%0A%0APrepending a pipe character to any node link will populate the space between the pipe and link with the node's title, from its metadata or default title. Examples are found throughout this documentation. Titled links are updated at the single file level whenever the file is saved.%0A%0A#### Opening Links%0A%0A##### Sublime%0AKey : %7C Open Urtext Link: %3Engh on a line containing a link to open the node with the linked ID. If the link is to an inline node, Sublime will scroll to and center its starting point.%0A%0A##### Pythonista %0A%0AUse the     botton when the cursor is on any line containing a link.Note that Urtext reads node regions on every save, so cursor location may be imprecise if the file has been altered since the last save.%0A%0A#### Linking to Files and Other Resources%0A%0A##### Web / HTTP(S)%0A%0AHTTP(S) links are recognized automatically and will open in the default browser.    %0AExample: pressing %7C Open Urtext Link: %3Engh on this line will open the link: http://github.com%0A%0A##### Files%0A%0ALinks to files can be made by writing     , followed immediately with a file path relative to the folder of the project:%0AExample: %5BREADME.md%5D(README.md)%0A%7C  ?  %3E%3Elmu%0A%0A%0A### Exporting%0AUrtext can export to plaintext, Markdown and HTML. Output can be written to a file or back into another node in the project. Exporting is dynamic; when changes are made to the source files, exports are immediately updated.%0A%0A#### Example : Urtext Documentation Exported in Markdown to a File%0A%0AThis dynamic definition exports the entire documentation from its root node %7C Urtext  Version: 1.0-alpha  Usage Guide and References %3Ea5m ) in Markdown format to a file called %5B./README.md:%5D(./README.md:)%0A%0A%0A%5B MISSING LINK : l0i %5D %0A%0A#### Example : Fragment Exported to HTML%0A%0AThe following Dynamic Definition is identical to the above, except it exports to HTML.%0A%0A%0A### File Naming                                                                                %0A%0ASince node identities are independent of their filenames, you can use any naming convention you want. Urtext can also rename files automatically in convenient formats based on their title and/or index. Renaming by index is useful, for instance, if you want file-level nodes easily readable inside a file system, mobile app, or other file browser.%0A%0ATo rename a file, select %22Rename File from Meta%22 from the command palette (Command-P). This will rename the file in one of the following schema:%0A%0AIf an index is present:%0A%0A.txt%0A%0AIf no index is present:%0A%0A.txt%0A%0AThis system preserves automatic numerical sorting within the filesystem, such that the most recent un-indexed nodes appear first. If you want to use another system, such as putting the title first, you can do so.%0A%0A%0A### History%0A%0AThough use of powerful version control tools (such as Git, Mercurial, etc.) is possible, Urtext has a lighter built-in versioning system that tracks edits at intervals. It is not necessary to make explicit %22commits%22 in order to utilize this. Urtext creates a single, linear history of each file's content, with each snapshot being a %22diff%22, or record of changes, since the previous snapshot. When a previous state is restored, no %22checkout%22 or %22rewind%22 occurs; rather, the newly restored state is appended to the history. Therefore, in addition to functioning as version control, the feature can also be used as an infinite and non-destructive %22undo/redo%22 editing history that saves state when the file is closed. The default interval is 10 seconds, and can be modified in project_settings. %0A%0ATo access a file's history, use %7C Toggle History Traverse: %3Endc.%0A%0AHistories are stored in the /history folder inside the project, as .pkl (%22pickle%22) files. This folder requires no user involvement. If using another version control tool such as Git, you may wish to add the /history folder to your .gitignore file, so that only explicitly committed versions of your project are visible in distributed repositories.%0A%0A%0A### This node now has special reserved metadata keys that will be parsed as follows:%0Aimestamp%0A%0A%0A### Errors and Warnings%0A%0A%0A### Using Multiple Projects%0A%0ATo use multiple projects at once, there is a project context manager. When you initially pass a path to Urtext, it looks recursively in all sub folders for additional projects. If it finds a compilable Urtext project in any one, it adds these to the context manager.  You can then freely switch among projects, either explicitly, or using links between the projects (described below). When switching projects, all Urtext's features, content and behavior, including links, compiling, and all functions linked to UI buttons, will operate in the context of the selected project. %0A%0AYou can put all your Urtext projects into sub folders of a single path. Alternatively, you may put them anyplace in the file system and choose as your Urtext root a folder that encompasses them all. Compiling may take longer if Urtext has to search through many unused directories. %0A%0AUsing Python, it is possible to only instantiate a single project, without the context manager. The current implementations in Sublime and Pythonista, however, use the context manager by default, even if you are only using a single project.%0A%0ARecall that what defines a project is a folder. This is also what separates it from other projects. If you add other Urtext project folders into the initial path, they will all be accessible from the same project list.%0A%0ATo switch between projects in Sublime, select Urtext: Select Project from the command palette.%0AIn Pythonista, use %22Switch Projects%22 from the feature menu.%0A%0A#### Project Naming (Identification)%0A%0AUnlike nodes, projects are uniquely identified by name. For this reason, each project must have an unique name within the running instance of Urtext. Projects can be named using the project_title key in the project's project_settings node. If no name is present, the project's name becomes its absolute path in the file system.%0A%0A#### Cross-Project Linking%0A%0AYou may also link from one project to another within the text. To so this, use the following syntax:%0A%0A=%3E%22name or path of the other project%5B MISSING LINK : idj %5D %0A(This link is only an example and is non-functioning)%0A%0AFollowing this link will change the project context to the named project and open its specified node.%0A%0A%0A### User Interface Elements%0A%0AUrtext is made to require minimal user interface elements. They mostly serve as conveniences that duplicate %0A%0A%0A%0A#### The Node Browser%0A%0AThe Node browser shows a list of all nodes in the project. It can be implemented in plaintext using a dynamic definition such as: . However, %0A%0Aalso be implemented %0A%0AOpening the Node List%0A%0ACtrl-Shift-E %0A%0A%0A%0A%0AIn Sublime Text there is also the alternative of using the UI dropdown. Press Control-Shift-E or select %22Urtext: Node List%22 from the Sublime command palette (Shift-Super-P). Here you can find a node by typing part of its title.%0A%0AIn the Node List, nodes are sorted by their time of creation, with most recent first. They can also be sorted by index (see %7C  ?  %3E00z).%0A%0A%0A#### Traverse Mode   %0A%0A%0A%0AThis feature is currently implemented in Sublime Text only.%0A%0AYou can navigate a node tree or list of nodes by turning on Traverse mode (Shift-Ctrl-R). This will open another pane next to the one you are currently in. As you navigate the nodeview in the left side with the cursor or mouse, the selected node shows on the right. Use Sublime's Focus Group navigation keys, or the mouse, to switch between left and right panes.%0A%0AToggle Traverse Mode off by pressing Shift-Ctrl-R again. The status bar at the bottom of the Sublime window indicates whether Traverse is on or off. %0A%0ANote that if Traverse mode is off, you can also open a link manually (Shift-Ctrl-/) as normal. %0A%0AThis feature is not built into Urtext; it is a feature of the Sublime package only.%0A%0A##### Word Wrap in Traverse Mode%0A%0ASince Traverse Mode splits the window into two or more panes, it is suggested to set Word Wrap Column to %22Auto%22 in Sublime Settings. This will cause the edited views to wrap correctly no matter the screen or window/pane size, as well as in Sublime's Distraction Free Mode.%0A%0AWhenever Traverse Mode is enabled on a view, word wrap for that view is turned off altogether to prevent awkward wrapping of trees. It is restored when Traverse Mode is turned off.((%3Ea5m:221)) @k06\n", "1632753891": "@@ -0,0 +1,33834 @@\n+ %0A%0A# Urtext %0AUsage Guide and References%0A%0A%0A%0A## About Urtext%0A%0A### Description%0A%0AUrtext is a syntax and interpreter for writing, connecting and organizing text.%0A%0AUrtext's basic unit is a %22node%22, which is a range or set of ranges of text within a file. A folder of nodes is a %22project%22. The Urtext interpreter is aware of all the nodes in a project at once, so nodes can reference, modify, and organize one another, across hundreds or thousands of files. The %7C Basic Syntax %3Eznj permits instructions embedded into the text itself. %0A%0AThe present interpreter for Urtext is in Python and can be used wherever Python 3.3 or later runs. Equivalent or variant interpreters could be created in any language or editing environment. %0A%0AUrtext has no built-in user interface; it only compiles and manages the files. Using Urtext requires an implementation within a text editor or text view, with a wrapper to pass messages between back and forth. Currently there is a package for Sublime Text (Mac/Windows/Linux) and a script for Pythonista (iOS).%0A%0A### Comparison To Other Tools%0A%0AUrtext shares some characteristics with markup languages such as Markdown and LaTeX, with the important difference that it is author-facing, rather than reader-facing. It is not primarily a document conversion or document generation tool, though it can export to some other formats (currently Markdown and HTML). %0A%0AUrtext's syntax combines content, structure and instructions all together. Unlike HTML or other markup languages, there is no additional code or markup %22behind%22 the visible syntax. Everything the interpreter reads is visible to the user.%0A%0A### Uses%0A%0AIncluding but not limited to:%0A%0A- prose writing%0A- research%0A- documentation%0A- knowledge/information base%0A- journaling%0A- Zettelkasten%0A- project/personal organization%0A- notetaking%0A- lightweight database%0A- any other writing or information management that can be done in text form%0A%0A### Features and Philosophy%0A%0A#### Plain Text%0A%0APlaintext is fast, human-readable, flexible, cross-platform, device-portable, and future-proof. It can be easily diffed and version-controlled (using Git, for example). Using theming and syntax highlighting, the text forms its own user interface without relying on graphic elements.%0A%0AIt can also incorporate (embed) other plaintext syntaxes, including other markup languages and other programming language syntaxes.%0A%0A#### Freeform, Flexible Syntax%0A%0AUrtext is like an inverse programming language. Whereas most programming languages provide a %22comment%22 syntax to insert freeform text around the code, Urtext works the opposite way: all content is text unless it matches syntax for structural or instructional code.%0A%0AText can be supplemented with user-defined metadata independent of the file system's metadata (datetime stamps, comments, etc.). It can even be used as a flat-file database.%0A%0ASimilar to code projects, an Urtext project can be spread across dozens or thousands of files, with individual files providing %22routes%22, or connections, to other other files or parts of files (nodes) via their node IDs. Text elements can be linked in tree-like, recursive (tangled), and other non-hierarchical ways.%0A%0AHowever, the basics are very simple, and you can use only the parts you need.%0A%0A#### Open source%0A%0A- Usable across multiple platforms and devices.%0A%0A- Decoupled from any particular text editor or interface ; it can be incorporated into any environment that runs Python, including any scriptable text editor or Python-scriptable environment capable of displaying a text editing view.%0A%0A#### Extensibile%0A%0AUrtext Actions, Directives, and ___ all inherit from base classes that can be user-extended to add or modify functionality limited only by the power of the Python language. %0A%0AAt present these features are undocumented, but can be understood if you know Python by reading the code.%0A%0A#### Future Proof%0A%0ANo reliance on anything that may not exist in 5 or 1000 years. %0A%0AThe interpreter/compiler could be implemented in any sufficiently capable language, current, past or future.%0A%0A#### Local%0A%0AThe Urtext parser is made primarily to operate on files present locally on the device. It is not dependent on a cloud or other subscription service. %0A%0ACloud services can be used to sync project files among devices if desired.%0A%0A#### Other Features%0A%0AUrtext is designed to make direct interaction with file system mostly unnecessary. Creating, naming, saving, and organizing files is handled for you.%0A%0A## About This Documentation%0A%0AThis is a documentation of Urtext written in Urtext.             was exported from the text files in this repository. Clone or download the repository to use it as both reference and example project. %0A%0AThis documentation is in active development. It may be incomplete or behind features/functionality of Urtext. Edits and revisions are encouraged in the form of issues and pull requests (https://github.com/nbeversl/urtext-docs/pulls, https://github.com/nbeversl/urtext-docs/issues).%0A%0AMany of the examples rely on syntax and formatting that are stripped out in export to Markdown. These are replaced with screenshots as necessary (see %7C Linking to Files and Other Resources %3E00q and %7C Exporting %3Eezg)%0A%0AInside an Urtext implementation, such as the Sublime Text with the Urtext package, you can navigate the project directly. Most of the key commands utilize Control-Shift as the modifier. %0A%0A- Control-Shift-/ to follow any link%0A- Control-Shift-H at any time to return to this %22home%22 node. %0A- View the readme: %5Breadme.md ;%5D(readme.md ;)%0A%0A## Quick Start, Guides and Examples %3Ez7t%0A  %E2%94%9C%E2%94%80%E2%94%80 Installation and Setup (Sublime Text / Desktop) %3E6cd%0A  %E2%94%9C%E2%94%80%E2%94%80 Basic Syntax %3Eznj%0A  %E2%94%94%E2%94%80%E2%94%80 Dynamic Definitions : Syntax and Parameters %3E87g%0AReference %3Eac5%0A  %E2%94%9C%E2%94%80%E2%94%80 Projects %3Edce%0A  %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Using/Adding Existing Files %3Erij%0A  %E2%94%9C%E2%94%80%E2%94%80 Nodes %3E01j%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Types of Nodes %3E07q%0A  %E2%94%82   %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 File Nodes %3Eekz%0A  %E2%94%82   %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Bracket Nodes %3E004%0A  %E2%94%82   %E2%94%82   %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Example Bracket Node %3Eywi%0A  %E2%94%82   %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Escaping Curly Brackets %3E8a8%0A  %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Compact Nodes %3Ekpz%0A  %E2%94%82   %E2%94%82       %E2%94%9C%E2%94%80%E2%94%80 Example Compact Node %3Ed7b%0A  %E2%94%82   %E2%94%82       %E2%94%94%E2%94%80%E2%94%80 Example inline node within compact node. %3E9up%0A  %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Node Titles %3Eue2%0A  %E2%94%9C%E2%94%80%E2%94%80 Dynamic Nodes %3Ek8p%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Dynamic Definitions %3E07u%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Lists %3Etwz%0A  %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Example: Nodes from the Documentation %3Em1r%0A  %E2%94%9C%E2%94%80%E2%94%80 Links and Pointers %3E00j%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Links %3E0y2%0A  %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Sublime Text tools to help with linking %3E00m%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Dynamic Titles %3E4vu%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Opening Links %3E01w%0A  %E2%94%82   %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Sublime %3Eosu%0A  %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Pythonista %3Eiy8%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Linking to Files and Other Resources %3E00q%0A  %E2%94%82   %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Web / HTTP(S) %3E00o%0A  %E2%94%82   %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Files %3E00p%0A  %E2%94%9C%E2%94%80%E2%94%80 Exporting %3Eezg%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Example : Urtext Documentation Exported in Markdown to a File %3Em9d%0A  %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Example : Fragment Exported to HTML %3Ebaq%0A  %E2%94%9C%E2%94%80%E2%94%80 File Naming %3E01m%0A  %E2%94%9C%E2%94%80%E2%94%80 History %3Eprp%0A  %E2%94%9C%E2%94%80%E2%94%80 This node now has special reserved metadata keys that will be parsed as follows: %3E00l%0A  %E2%94%9C%E2%94%80%E2%94%80 Errors and Warnings %3Ebpk%0A  %E2%94%9C%E2%94%80%E2%94%80 Using Multiple Projects %3Eipy%0A  %E2%94%82   %E2%94%9C%E2%94%80%E2%94%80 Project Naming (Identification) %3Etgp%0A  %E2%94%82   %E2%94%94%E2%94%80%E2%94%80 Cross-Project Linking %3E7lx%0A  %E2%94%94%E2%94%80%E2%94%80 User Interface Elements %3E3n6%0A      %E2%94%9C%E2%94%80%E2%94%80 The Node Browser %3E01i%0A      %E2%94%94%E2%94%80%E2%94%80 Traverse Mode %3E00w%0A          %E2%94%94%E2%94%80%E2%94%80 Word Wrap in Traverse Mode %3Exci%0AAbout This Documentation %3Ep23%0Aflags=exclude_from_export%0A((%3Ea5m:81))%0A%0A## Quick Start, Guides and Examples%0A%0A%0A### Installation and Setup (Sublime Text / Desktop)%0A%0AFor desktop use (PC/Mac/Linux) Urtext is implemented in Sublime Text.%0A%0A1. Download Sublime Text. (https://www.sublimetext.com/).%0A%0A2. Download Urtext and all its dependencies from the monorepo at                                          . You can either download this repository as a .ZIP file and unzip it, or if you want to maintain version control, use                                                                         . Put the contents of the cloned/unzipped folder (important: not the folder itself) directly into your                                folder.%0A%0A3. Download the Sublime Urtext package at                                             . Place it in your Packages folder (Sublime Text 3/Packages)%0A%0A4. Clone/download this documentation repository and open its folder in Sublime. It will automatically be read as an Urtext project.%0A%0AOnce the Sublime package is installed, it will always look for any files with the .txt extension in open folders and attempt to compile them into a project. To open an existing Urtext project, open the folder, a file in the folder, or a Sublime project that includes the folder, and any feature described in this documentation will work.%0A%0ATo make a new project, open an empty folder and select Select                               from the Sublime Command Palette. For more information, see %7C Projects %3Edce.%0A%0A%0A### Basic Syntax%0A%0AAll text is plain content unless inside a timestamp wrapper, dynamic definition wrapper, or preceded by a metadata assignment operator and keyname.%0A%0A%0ABracket Node Wrappers. Can appear anywhere. Can be nested aribrarily deep.%0AMore information: %7C Bracket Nodes %3E004%0A%0A%0ANode Link. Links to the specified node by ID, like a hyperlink. %0AMore information: %7C Links %3E0y2%0A%0A%0ANode Pointer: Embeds the specified node as though it were included bracket using wrappers       (see above)%0AMore information: %5B MISSING LINK : lmu %5D %0A%0A%0ATitle Pipe. Placed immediately before a node link or node pointer (whitespace is ok), dynamically populates the linked node title.%0AExample and more info: %7C Dynamic Titles %3E4vu%0A%0A%0ABullet Node marker. Must be the first non-whitespace character on a line. Must include an ID in order to parse as a node.%0AMore information: %7C Bullet Nodes %3Ej6t%0A%0A%0ATimestamp wrapper. Parses user-defined datetime strings, with many default formats built in.%0AThe first character inside the brackets may not be    , '-', or whitespace.%0AExample: %0AMore information: %7C Syntax and Format %3E005%0A%0A%0AMetadata assignment operator. Accepts a user-defined key on the left, and values and timestamps on the right.%0AMetadata may appear anywhere. They attach to their containing (parent) node, remember their exact location, and can serve as anchors/bookmarks to context. Keys must be single words (underscore permitted), values may be any characters, terminated with a semicolon or newline. The pipe character (   ) separates multiple values for a single key.%0AExample:%0A%0A%0A### Dynamic Definitions : Syntax and Parameters%0A%0ADynamic definitions are instructions for dynamically building nodes from other nodes. Definitions can be written anywhere; it is not necessary to store a definition in the same file to which it refers. (Definitions cannot, however, be stored in the node they target, since they would overwrite themselves.)%0A%0ADynamic definitions are wrapped with double left and right square brackets(    ,    ). There are no restrictions on spacing, indentation, newlines, or other arbitrary text or whitespace. The order of parameters within a definition is unimportant; they are evaluated as a group.%0A%0AThis dynamic definition below is for documentation and does not actually do anything. It rather lists every parameter along with an explanation of its use and purpose. For example uses, see %7C Dynamic Nodes %3Ek8p%0A%0A%0A%5B%5B %09ID() %09%09%09Target node to dynamically populate with output.%0AAccepts a link to a node %5B MISSING LINK : eee %5D )%0A%0AINCLUDE()  %09%09Nodes to include. Accepts one or more key/value pairs and optional parameters.%0Aor +()%0AComparisons:%0A%0Ameans equal to%0AINCLUDE(key = value)%09%0AIncludes all nodes with the given key containing the given value%0A%0Ameans %22contains%22%0AINCLUDE(_contents ? some text or content)%0AIncludes all nodes containing %22some text or content%22 in their text contents.%0A(See also -search)%0A%0Ameans %22anything%22%0AINCLUDE(index = *)%0AIncludes all nodes containing the key        %0A%0AUse semicolon or newline to separate entries, as everywhere in Urtext.%0A%0AAdditional Flags:%0A%0AAdditional flags can be included in %0A%0AINCLUDE(*) or +(*)%0AIncludes all nodes in the project%09%09%09%09%09%09%09%09%09%0A%0Aor     %0AINCLUDE(-all_projects) or +(*p)%0AExpands included nodes to include all projects in the project list.%0A%0A%0AIncludes all nodes that contain only whitespace as their content%0A%0ANote these additional flags substitute for semicolons/newlines as separators between entries.%0A%0ASystem keys%0A%0AUrtext includes some built-in keys whose values are generated automatically. %0AThese may also be used in INCLUDE(): %0A%0A%0AINCLUDE(_links_to = 46d)%0AIncludes all nodes that contain links to node ID      %0A%0A%0AINCLUDE(_links_from = 46d)%0AIncludes all nodes to which node ID       links%0A%0A: Refers to a node's text contents. %0ACan be used, for instance, for full text search or comparison.%0AINCLUDE(_contents ? Western Civilization)%0AIncludes any node that contents the text %22Western Civilization%22%0A(comparisons are case-insensitive)%0A%0AEXCLUDE()%09%09Accepts all the same parameters as INCLUDE()%0Aor -()%09%09%09Always evaluated after INCLUDE(), excludes the specified nodes from the result.%0A%0A%0A%0ASORT()%09%09%09Sorts the results. Entries can be keynames (include system-defined ones, see below)%0Aor flags, with multiple keys separated by semicolon or newline.%0A%0ASORT(%0A%0A%5B key name %5D%09%09Sorts by the value of the given key. Default is alphabetical.%0A%0A-num or -n  %09%09Sorts the results numerically if possible.%0AThe default sort is alphabetical.%0A%0A-timestamp or -t  %09Sort by timestamp%0A%0A-reverse or -r %09%09Reverses the sort order. Applicable to any of the above.%0A%0A)%0A%0ANote that system-assigned keys are also available:%0A%0A%0A%0A%0AExample:%0ASORT(title -reverse)%0A%0ALIMIT()%09%09%09Limits the output to the specified number of results.%0ALimit is applied after SORT().%0A%0AExample:%0ALIMIT(30)%0AWill only show 30 results of nodes with the specified INCLUDE()/EXCLUDE() parameters.%0A%0A%0ALIST()%09%09%09This is the default output if no other is specified. %0AIt outputs a list of (unique) nodes specified by the combination of INCLUDE() with EXCLUDE(). %0ATo see instead a tree representation of each node and its descendants, if any, provide a level of depth as%0Aa parameter. Example: LIST(5). %0A%0ATo show unlimited depth (until recursion, if it occurs), use the asterisk: LIST(*)%0A%0ACOLLECT()%09%09Aggregates occurrences of metadata, including timestamps, and surrounding contents.%0AAccepts key/value pais %0AReturns a seperate item for each occurence.%0A%0AExample:%0ACOLLECT(timestamp=*)%0A%0A%0ASHOW()%09%09%09Supplies a template for the output of each result. %0AAccepts keynames, denoted with    , arbitrary text, and Unicode characters including %5Cn, %5Cr, %5Ct.%0A%0AWords preceded by     are are evaluated as metadata keys, replaced in the output by their value(s).%0ANote that key names themselves are not displayed in the output. Add keynames manually if you want them included.%0A%0AExample:%0ASHOW(Author: $author, Date: $date%5Cn)%0A%0AIn addition to all user-defined metadata keys, the following tokens are included:%0A%0ASHOW(%0A%0A$title %0ADisplays the node title, default or via the         meta key%0A%0A$link%0ADisplays a link to the node%0A%0A$date %0ADisplays the node's date in the project's default timestamp format%0A%0A$meta%0AShorthand to show all metadata for every node, formatted as by %22consolidate metadata%22%0A%0A$contents:120%0ADisplays the contents of the node. Optional excerpt/length specifier after the colon%0A)%0A%0AHEADER()%09%09Adds additional arbitrary/freeform text to the beginning of the output. This can include any syntax %0Avalid inside Urtext nodes, including metadata.%0A%0AFOOTER()%09%09Adds additional arbitrary/freeform text to the end of the output. Same as for HEADER().%0A%0AMARKDOWN()%09%09Outputs a Markdown representaion of the node(s) into another node or into an external file.%0AWill include all hierarchically nested nodes using Markdown heading format.%0ASee FORMAT() for ways to preformat the output.%0A%0AAccepts one or more semicolon- or newline-separated links to nodes or files (see %7C Linking to outside %0Aresources %3E00q)%0A%0ATo include all nodes pointed to from the root file, recursively, use the flag:%0A%0A%0AHTML()%09%09%09As for MARKDOWN(), but outputs as HTML.%0A%0APLAINTEXT()%09%09As for MARKDOWN(), but outputs Plaintext (Urtext syntax stripped out, %0Aincluding metadata and dynamic definitions.)%0A%0ACan be used, for instance, to export a node or nodes to a non-Urtext text file.%0A%0AFORMAT()%09%09Specificies additional global formatting of the output. There are intended primarily for formatting %0Aexported text, but can be applied to any output. Accepts one or more predefined flags:%0A%0A-preformat or -pre%0AWraps preformatted text (trees, etc.) in backticks to preserve preformatting, %0Afor instance, for Markdown contenxts.%0A%0A-multiline_meta or -mm%0APlaces dynamic node metadata on separate lines instead of separated by;%0A%0A-indent: or -i%0AIndents the dynamic node by the number of spaces specified in parentheses.%0AExample: FORMAT(-indent:20)%0A%0A%5D%5D%0A%7C Sublime Text Key Bindings and Operations %3E1vs%0A%0A## Reference%0A%0A%0A### Projects%0A%0AAn Urtext project is a single folder. The folder must contain at least file with an Urtext Node ID.%0A%0ATo make an new empty project:%0A%0A- make a new folder and open the folder in Sublime Text. %0A- Select Urtext : Initialize Project from the Sublime Command Palette. %0A- The folder how has one Urtext file and a           folder for tracking edits. (See %7C History %3Eprp )%0A%0A#### Using/Adding Existing Files%0A%0AOnce a folder contains at least one file with a node ID, you can add and use existing plaintext files in the project without any modification. However for most of the benefits of Urtext you must minimally an ID (%7C Node IDs %3E01q) in each file.%0A%0ATo do so, select                           from the Sublime Command palette.%0A%0ANote the append will occur without a confirmation dialog, so if you are just experimenting with this system, consider making a copy of your file folder so you can revert without having to manually remove the metadata.%0A%0A%0A### Nodes%0A%0AA node is region, or set of regions, of a file, up to and including the entire file. %0AA file is itself a node. %0AAll nodes can contain other nodes.%0A%0AThe identity of an Urtext node persists no matter its containing filename. This is accomplished by assigning each node a three-character identifier using alpha-numeric characters, providing over 46,000 possible nodes per project. See %7C Node IDs %3E01q for more information.%0A%0AUrtext generates IDs automatically on creation of new nodes. ID's can be changed without affecting functionality, though links must then be manually updated as well. %0A%0AIt is possible to use files containing no IDs in an Urtext project, but then most of the features of Urtext are lost.%0A%0A#### Types of Nodes%0A%0A%0A%0A##### File Nodes%0A%0AThe most basic node is a single file. It may or may not contain other nodes nested inside it.%0A%0ATo create a new file-level node: %7C New Node: ctrl + shift + ; %3Eve3. A new file is created and named automatically. It contains a single node ID and (by default) a creation timestamp.%0A%0A%0A##### Bracket Nodes                                                       %0A%0ANodes can be nested arbitrarily deep inside other nodes, whether the parent node is a file or another bracket node. For all purposes in Urtext, bracket nodes' identities are unique from their containing files, parent nodes, and child nodes.   %0A%0AThe syntax for bracket nodes is to wrap the content in curly braces:%0A%0A###### Example Bracket NodeCreate an bracket nodes with %7C Insert Inline Node: %3Erzx. Inside the inserted double curly braces is a new node with an auto-generated ID.   %0A%0ATo wrap existing content into an bracket node, first select the content and use the same keypress.%0A%0AWhen syntax highlighting is active, bracket node wrappers are tinted to showing nesting level:%0A%0A###### Example first level%0A%0A####### second level%0A%0A######## third test level%0A%0A######### fourth level%0A%0A########## fifth level(The following metadata excludes this example from the Table of Contents tree. See %5B MISSING LINK : v7r %5D  for information)(For Markdown export, a screenshot is provided showing indentation and highlighting:) %5B./files/node-nesting-example.png%5D(./files/node-nesting-example.png)%0A%0ANote that every opening curly bracket must be closed in the same file. Every node requires an ID between its opening and closing brackets. Nodes at the file level (%7C File Nodes %3Eekz) do not use curly-braces, as their region boundaries are the file itself.%0A%0A###### Escaping Curly Brackets%0A%0AIf you need to use curly brackets in your text, you can escape the Urtext syntax by preceding the bracket with a backward slash; this will prevent them from being parsed: %5C%7B %5C%7D%0A%0ATo ignore syntax elements more globally, and/or to embed other syntaxes that use Urtext characters, such as JSON, PHP, and JavaScript, see %5B MISSING LINK : oy5 %5D %0A%0A%0A##### Compact Nodes%0A%0AKey: %7C Insert Compact Node: %3E1qq%0A%0AFor text content requiring only a single line, such as list items, very short notes and similar, use the caret character (   ) as the first non-whitesoace character on a new line. This defines a new node as a child of the node in which the character appears, with the closing wrapper being the end of the same line. %0A%0ALike all nodes, a compact node requires an ID. Like all nodes, it can contain metadata and even inline nodes, as long as the entire contents, including wrappers and metadata, are contained on a single line. (Note that %22line%22 in this case refers to consecutive characters between explicit line breaks, and not to lines in the editor, which may be arbitrarily wrapped.)%0A%0A###### Example Compact Node%0A%0A####### Example inline node within compact node.%5B./files/example-compact-node.png%5D(./files/example-compact-node.png)%0A%0A#### Node Titles%0A%0ABy default, the full first non-whitespace line of any node is the node's title. This can be overridden using the         metadata key or by following the desired text with the underscore (   ) character as used in this document.%0A%0A%0A### Dynamic Nodes%0A%0ADynamic nodes contain content aggregated from the contents of other nodes. Dynamic content stays up to date with its source content %22dynamically%22 (on file save). A dynamic node can be seen as a %22view into%22 other content.%0A%0A#### Dynamic Definitions%0A%0ADynamic nodes are created using a Dynamic Definition. Dynamic Definitions are specified with double square brackets , and have there own syntax, including scoping and highlighting. Dynamic definitions can query, sort, filter, and format the output of nodes in a variety of ways, making them adaptable to many purposes. This section illustrates some example uses of dynamic nodes. It will be helpful to reference %7C Dynamic Definitions : Syntax and Parameters %3E87g.%0A%0ADynamic Definitions can be written anywhere; it is not necessary to store the definition in the same file to which it refers. (Note that they cannot, however, be stored in the node they target, since they would overwrite themselves.)%0A%0AThe key %7C Insert Dynamic Definition with Node:                    %3Ejsc creates a new dynamic definition in Sublime, auto-populated with a corresponding empty inline node. You can also write a definition manually, providing the ID of an existing node. For example, if you want the contents to replace an existing node, assign this key the value of that node's ID. If you want it to populate new inline node, create that node and then copy/paste its ID. Note that Dynamic Definitions do not create their target nodes automatically ; the target node must exist, or the definition will have no effect.There are two main kinds of dynamic output, Lists and Collections:%0A%0A%22Lists%22 are lists of nodes, with each node displayed not more than once. Lists can optionally expand into trees, showing the hierarchy of nested relationships from each root node in the list.%0A%0A%0A%0A#### Lists%0A%0A##### Example: Nodes from the Documentation%0A%0Aproject_settings %3E8p4%0ATemplating the Output with the SHOW parameter %3E8p5%0AGenerated automatically in a dynamic node, contains a link to the node containing the definition. %3E5cq%0AList Projects: %3Eg5a%0ATimestamps %3E2i4%0ALinks %3E0y2%0ABasic Syntax %3Eznj%0AInsert Dynamic Definition with Node: %3Ejsc%0AFull Text Search %3E4p9%0AHome Node: %3E5ab%0ACopy Link to this Node With Title: %3E05x%0ANodes Excluded from the Table of Contents %3Ejkl%0ACopy Link to this Node: %3Evel%0AComparison To Other Tools %3Eh8z%0AToggle History Traverse: %3Endc%0ANew Node: ctrl + shift + ; %3Eve3%0ADynamic Definitions : Syntax and Parameters %3E87g%0AExample Bracket Node %3Eywi%0ATime Zones %3E7w6%0ACase-sensitivity %3El36%0A((%3Etwz:7))%5B./files/example-list-1-definition.png%5D(./files/example-list-1-definition.png)%0A%5B./files/example-list-1.png%5D(./files/example-list-1.png)%0A%0ANote that the at the bottom of the node is the reserved key       which refers to the node containing the definition.%0A%0ALists can be expanded into trees that show the outline of many nodes across many files at any specified depth, up to. In fact, a list is a tree with depth 1.%0A%0A%7C Trees %3E%3Ew8u%0A%0A%22Collections%22 aggregate metadata entries with their context; the same node may appear many times in a collection if it contains many metadata entries matching the queried parameters.%0A%0A%7C Collections %3E%3E00k%0A%0A%0A### Links and Pointers%0A%0A#### Links %0A%0ATo make a %22hyperlink%22 from one node to another, use the right angle bracket (%3E) followed immediately by a node ID. Linking does not require a filename or any other information, only the node ID. Any other surrounding text is ignored.%0A%0A##### Sublime Text tools to help with linking %0A%0A%0ATwo Sublime Command Palette commands can make linking quick and easy:%0A%0AUrtext : Link To ...%0ALinks from the currently viewed node to another node which you can select in the selection panel. When you select a node in the quick panel, a link to that node will be inserted at the cursor.%0A%0AUrtext: Link From ...%0ALinks TO the current node FROM another node. When you select this command, a link to the current node will be copied to the clipboard. You can then paste the reference into the node you open in the quick panel.%0A%0A#### Dynamic Titles%0A%0APrepending a pipe character to any node link will populate the space between the pipe and link with the node's title, from its metadata or default title. Examples are found throughout this documentation. Titled links are updated at the single file level whenever the file is saved.%0A%0A#### Opening Links%0A%0A##### Sublime%0AKey : %7C Open Urtext Link: %3Engh on a line containing a link to open the node with the linked ID. If the link is to an inline node, Sublime will scroll to and center its starting point.%0A%0A##### Pythonista %0A%0AUse the     botton when the cursor is on any line containing a link.Note that Urtext reads node regions on every save, so cursor location may be imprecise if the file has been altered since the last save.%0A%0A#### Linking to Files and Other Resources%0A%0A##### Web / HTTP(S)%0A%0AHTTP(S) links are recognized automatically and will open in the default browser.    %0AExample: pressing %7C Open Urtext Link: %3Engh on this line will open the link: http://github.com%0A%0A##### Files%0A%0ALinks to files can be made by writing     , followed immediately with a file path relative to the folder of the project:%0AExample: %5BREADME.md%5D(README.md)%0A%7C  ?  %3E%3Elmu%0A%0A%0A### Exporting%0AUrtext can export to plaintext, Markdown and HTML. Output can be written to a file or back into another node in the project. Exporting is dynamic; when changes are made to the source files, exports are immediately updated.%0A%0A#### Example : Urtext Documentation Exported in Markdown to a File%0A%0AThis dynamic definition exports the entire documentation from its root node %7C Urtext  Version: 1.0-alpha  Usage Guide and References %3Ea5m ) in Markdown format to a file called %5B./README.md:%5D(./README.md:)%0A%0A%0A%5B MISSING LINK : l0i %5D %0A%0A#### Example : Fragment Exported to HTML%0A%0AThe following Dynamic Definition is identical to the above, except it exports to HTML.%0A%0A%0A### File Naming                                                                                %0A%0ASince node identities are independent of their filenames, you can use any naming convention you want. Urtext can also rename files automatically in convenient formats based on their title and/or index. Renaming by index is useful, for instance, if you want file-level nodes easily readable inside a file system, mobile app, or other file browser.%0A%0ATo rename a file, select %22Rename File from Meta%22 from the command palette (Command-P). This will rename the file in one of the following schema:%0A%0AIf an index is present:%0A%0A.txt%0A%0AIf no index is present:%0A%0A.txt%0A%0AThis system preserves automatic numerical sorting within the filesystem, such that the most recent un-indexed nodes appear first. If you want to use another system, such as putting the title first, you can do so.%0A%0A%0A### History%0A%0AThough use of powerful version control tools (such as Git, Mercurial, etc.) is possible, Urtext has a lighter built-in versioning system that tracks edits at intervals. It is not necessary to make explicit %22commits%22 in order to utilize this. Urtext creates a single, linear history of each file's content, with each snapshot being a %22diff%22, or record of changes, since the previous snapshot. When a previous state is restored, no %22checkout%22 or %22rewind%22 occurs; rather, the newly restored state is appended to the history. Therefore, in addition to functioning as version control, the feature can also be used as an infinite and non-destructive %22undo/redo%22 editing history that saves state when the file is closed. The default interval is 10 seconds, and can be modified in project_settings. %0A%0ATo access a file's history, use %7C Toggle History Traverse: %3Endc.%0A%0AHistories are stored in the /history folder inside the project, as .pkl (%22pickle%22) files. This folder requires no user involvement. If using another version control tool such as Git, you may wish to add the /history folder to your .gitignore file, so that only explicitly committed versions of your project are visible in distributed repositories.%0A%0A%0A### This node now has special reserved metadata keys that will be parsed as follows:%0Aimestamp%0A%0A%0A### Errors and Warnings%0A%0A%0A### Using Multiple Projects%0A%0ATo use multiple projects at once, there is a project context manager. When you initially pass a path to Urtext, it looks recursively in all sub folders for additional projects. If it finds a compilable Urtext project in any one, it adds these to the context manager.  You can then freely switch among projects, either explicitly, or using links between the projects (described below). When switching projects, all Urtext's features, content and behavior, including links, compiling, and all functions linked to UI buttons, will operate in the context of the selected project. %0A%0AYou can put all your Urtext projects into sub folders of a single path. Alternatively, you may put them anyplace in the file system and choose as your Urtext root a folder that encompasses them all. Compiling may take longer if Urtext has to search through many unused directories. %0A%0AUsing Python, it is possible to only instantiate a single project, without the context manager. The current implementations in Sublime and Pythonista, however, use the context manager by default, even if you are only using a single project.%0A%0ARecall that what defines a project is a folder. This is also what separates it from other projects. If you add other Urtext project folders into the initial path, they will all be accessible from the same project list.%0A%0ATo switch between projects in Sublime, select Urtext: Select Project from the command palette.%0AIn Pythonista, use %22Switch Projects%22 from the feature menu.%0A%0A#### Project Naming (Identification)%0A%0AUnlike nodes, projects are uniquely identified by name. For this reason, each project must have an unique name within the running instance of Urtext. Projects can be named using the project_title key in the project's project_settings node. If no name is present, the project's name becomes its absolute path in the file system.%0A%0A#### Cross-Project Linking%0A%0AYou may also link from one project to another within the text. To so this, use the following syntax:%0A%0A=%3E%22name or path of the other project%5B MISSING LINK : idj %5D %0A(This link is only an example and is non-functioning)%0A%0AFollowing this link will change the project context to the named project and open its specified node.%0A%0A%0A### User Interface Elements%0A%0AUrtext is made to require minimal user interface elements. They mostly serve as conveniences that duplicate %0A%0A%0A%0A#### The Node Browser%0A%0AThe Node browser shows a list of all nodes in the project. It can be implemented in plaintext using a dynamic definition such as: . However, %0A%0Aalso be implemented %0A%0AOpening the Node List%0A%0ACtrl-Shift-E %0A%0A%0A%0A%0AIn Sublime Text there is also the alternative of using the UI dropdown. Press Control-Shift-E or select %22Urtext: Node List%22 from the Sublime command palette (Shift-Super-P). Here you can find a node by typing part of its title.%0A%0AIn the Node List, nodes are sorted by their time of creation, with most recent first. They can also be sorted by index (see %7C  ?  %3E00z).%0A%0A%0A#### Traverse Mode   %0A%0A%0A%0AThis feature is currently implemented in Sublime Text only.%0A%0AYou can navigate a node tree or list of nodes by turning on Traverse mode (Shift-Ctrl-R). This will open another pane next to the one you are currently in. As you navigate the nodeview in the left side with the cursor or mouse, the selected node shows on the right. Use Sublime's Focus Group navigation keys, or the mouse, to switch between left and right panes.%0A%0AToggle Traverse Mode off by pressing Shift-Ctrl-R again. The status bar at the bottom of the Sublime window indicates whether Traverse is on or off. %0A%0ANote that if Traverse mode is off, you can also open a link manually (Shift-Ctrl-/) as normal. %0A%0AThis feature is not built into Urtext; it is a feature of the Sublime package only.%0A%0A##### Word Wrap in Traverse Mode%0A%0ASince Traverse Mode splits the window into two or more panes, it is suggested to set Word Wrap Column to %22Auto%22 in Sublime Settings. This will cause the edited views to wrap correctly no matter the screen or window/pane size, as well as in Sublime's Distraction Free Mode.%0A%0AWhenever Traverse Mode is enabled on a view, word wrap for that view is turned off altogether to prevent awkward wrapping of trees. It is restored when Traverse Mode is turned off.((%3Ea5m:221)) @k06\n"}