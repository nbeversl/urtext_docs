{"1633271971": "Bracket Nodes _ @004                                                       \n\nNodes can be nested arbitrarily deep inside other nodes, whether the parent node is a file or another bracket node. For all purposes in Urtext, bracket nodes' identities are unique from their containing files, parent nodes, and child nodes.   \n\nThe syntax for bracket nodes is to wrap the content in curly braces:\n\n{ Example Bracket Node _  @ywi }\n\n\nCreate an bracket nodes with | Insert Inline Node: >rzx. Inside the inserted double curly braces is a new node with an auto-generated ID.   \n\nTo wrap existing content into an bracket node, first select the content and use the same keypress.\n\nWhen syntax highlighting is active, bracket node wrappers are tinted to showing nesting level:\n\n    {  Example first level\n        { second level \n           { third test level\n                { fourth level \n                    {  fifth level  @e5n}\n                    @5pq}  \n                @80d}  \n           @6qj}  \n\n    (The following metadata excludes this example from the Table of Contents tree. See |  ?  >v7r for information) \n    flags::exclude_from_toc - exclude_from_export\n\n    @8fv}  \n\n(For Markdown export, a screenshot is provided showing indentation and highlighting:) f>./files/node-nesting-example.png\n\nNote that every opening curly bracket must be closed in the same file. Every node requires an ID between its opening and closing brackets. Nodes at the file level (| File Nodes >ekz) do not use curly-braces, as their region boundaries are the file itself.\n  \n\n{  Escaping Curly Brackets _\n\n    If you need to use curly brackets in your text, you can escape the Urtext syntax by preceding the bracket with a backward slash; this will prevent them from being parsed: \\{ \\}\n\n    To ignore syntax elements more globally, and/or to embed other syntaxes that use Urtext characters, such as JSON, PHP, and JavaScript, see | Embedded Syntaxes and Pass Markers >oy5\n\n  @8a8}"}