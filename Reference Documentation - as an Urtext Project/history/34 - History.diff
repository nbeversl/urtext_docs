{"1617912594": "@@ -853,16 +853,35 @@\n raverse:\n+ %60ctrl + shift + g%60\n  %3Endc.%0A%0A\n", "1617912446": "@@ -829,16 +829,17 @@\n , use %7C \n+%60\n Toggle H\n@@ -853,16 +853,17 @@\n Traverse\n+%60\n : %3Endc.%0A\n", "1628823278": "@@ -1,1241 +0,0 @@\n-History%0A%0AThough use of powerful version control tools (such as Git, Mercurial, etc.) is possible, Urtext has a lighter built-in versioning system that tracks edits at intervals. It is not necessary to make explicit %22commits%22 in order to utilize this. Urtext creates a single, linear history of each file's content, with each snapshot being a %22diff%22, or record of changes, since the previous snapshot. When a previous state is restored, no %22checkout%22 or %22rewind%22 occurs; rather, the newly restored state is appended to the history. Therefore, in addition to functioning as version control, the feature can also be used as an infinite and non-destructive %22undo/redo%22 editing history that saves state when the file is closed. The default interval is 10 seconds, and can be modified in project_settings. %0A%0ATo access a file's history, use %7C Toggle History Traverse: %60ctrl + shift + g%60 %3Endc.%0A%0AHistories are stored in the /history folder inside the project, as .pkl (%22pickle%22) files. This folder requires no user involvement. If using another version control tool such as Git, you may wish to add the /history folder to your .gitignore file, so that only explicitly committed versions of your project are visible in distributed repositories.%0A%0A@prp%0A\n", "1617912459": "@@ -829,17 +829,16 @@\n , use %7C \n-%60\n Toggle H\n@@ -856,9 +856,8 @@\n erse\n-%60\n : %3En\n", "1617912362": "@@ -857,27 +857,8 @@\n rse:\n- %60ctrl + shift + g%60\n  %3End\n", "1617912361": "History\n\nThough use of powerful version control tools (such as Git, Mercurial, etc.) is possible, Urtext has a lighter built-in versioning system that tracks edits at intervals. It is not necessary to make explicit \"commits\" in order to utilize this. Urtext creates a single, linear history of each file's content, with each snapshot being a \"diff\", or record of changes, since the previous snapshot. When a previous state is restored, no \"checkout\" or \"rewind\" occurs; rather, the newly restored state is appended to the history. Therefore, in addition to functioning as version control, the feature can also be used as an infinite and non-destructive \"undo/redo\" editing history that saves state when the file is closed. The default interval is 10 seconds, and can be modified in project_settings. \n\nTo access a file's history, use | Toggle History Traverse: `ctrl + shift + g` >ndc.\n\nHistories are stored in the /history folder inside the project, as .pkl (\"pickle\") files. This folder requires no user involvement. If using another version control tool such as Git, you may wish to add the /history folder to your .gitignore file, so that only explicitly committed versions of your project are visible in distributed repositories.\n\n@prp\n"}