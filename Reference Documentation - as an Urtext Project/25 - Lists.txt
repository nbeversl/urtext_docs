Lists

[[ 		
	Dynamic definitions can contain arbitrary text. The only parts read by the compiler are the function names with their parameters in parentheses. Like nodes, you can format/indent/comment these definitions any way you want.

	This definition targets ID m1r, which appears immediately below: | Example: Nodes from the Documentation >m1r.
	ID(>m1r) 

	The asterisk means to include all nodes in the project. 
	INCLUDE(*)

	The LIMIT parameter limits the output to the specified number of results. 
	Note that the default sort order is alphabetical. 
	LIMIT(20)

	FORMAT(indent:3)
	Here the FORMAT parameter is used to indent the output 3 tabs.
	HEADER(Example: Nodes from the Documentation\n flags::exclude_from_export)

	]]

{ Example: Nodes from the Documentation
 flags::exclude_from_export
Dynamic Definitions >07u
Types of Nodes >07q
Dynamic Definitions : Syntax and Parameters >87g
Quick Tag from Other: >zep
(untitled) >mbm
Insert Dynamic Definition with Node: >jsc
JSON >njo
About Compact Nodes >frm
Nav Backward: >3hy
Other Features >kne
This node is just here as a destination from the node pointer in  Basic Syntax >ttt
Comparison To Other Tools >h8z
Nodes Excluded from the Table of Contents >jkl
Hash Key >4ry
Project Naming (Identification) >tgp
Searching >rr3
Dependencies and Installation >2fn
Syntaxes : >r0w
History >a8q
This binds the definition to a specific piece of text, rather than to the output of a node. So when you click on this, anywhere: >e8x
((>twz:7)) @m1r}

	f>./files/example-list-1-definition.png
	f>./files/example-list-1.png

   Note that the at the bottom of the node is the reserved key `def` which refers to the node containing the definition.


@twz 