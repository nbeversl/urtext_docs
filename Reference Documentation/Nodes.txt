Nodes _

 Node Titles _

	By default, the full first non-whitespace line of any node is the node's title. This can be overridden using the "title" metadata key or by following the desired text with the underscore "_" character as used in this document. 



| Node IDs >>01q



Urtext's basic unit is a "node", which is a range or set of ranges of text within a file. A folder of nodes is a "project". A node is region, or set of regions, of a file, up to and including the entire file.  A file is itself a node, and nodes can contain other nodes.

The identity of an Urtext node persists no matter its containing filename. This is accomplished by assigning each node a three-character identifier using alpha-numeric characters, providing over 46,000 possible nodes per project. See | Node IDs >01q for more information.

Urtext generates IDs automatically on creation of new nodes. ID's can be changed without affecting functionality, though links must then be manually updated as well. 

It is possible to use files containing no IDs in an Urtext project, but then most of the features of Urtext are lost.



  Types of Nodes _


	
 { 	File Nodes _
 
The most basic node is a single file. It may or may not contain other nodes nested inside it.

To create a new file-level node: | New Node: ctrl + shift + ; >ve3. A new file is created and named automatically. It contains a single node ID and (by default) a creation timestamp. @ekz }








{Bullet Nodes  _

	For nodes that can fit on a single line, such as items in a list, short phrases, word definitions, and so on, you can use a simplified node syntax. Begin the line with the caret symbol (^); the closing wrapper then becomes the next newline (the end of the same line). Like other nodes:


• require an id @frm
• can have arbitrary other metadata @xlc
• become child nodes of their containing node. @hiz


@j6t}



{ 
 Bracket Nodes _ 
 

Nodes can be nested arbitrarily deep inside other nodes, whether the parent node is a file or another bracket node. For all purposes in Urtext, bracket nodes' identities are unique from their containing files, parent nodes, and child nodes.   

The syntax for bracket nodes is to wrap the content in curly braces:


         Example Bracket Node _  


Create an bracket nodes with | Insert Inline Node: ctrl + shift + \ >rzx. Inside the inserted double curly braces is a new node with an auto-generated ID.   

To wrap existing content into an bracket node, first select the content and use the same keypress.

When syntax highlighting is active, bracket node wrappers are tinted to showing nesting level:

Synax Highlighting Example _
      Example first level
         second level 
            third test level
                 fourth level 
                      fifth level  
                    
                  
            

    (The following metadata excludes this example from the Table of Contents tree. See |  ?  >v7r for information) 

    


(For Markdown export, a screenshot is provided showing indentation and highlighting:) f>./files/node-nesting-example.png

Note that every opening curly bracket must be closed in the same file. Every node requires an ID between its opening and closing brackets. Nodes at the file level (| File Nodes >ekz) do not use curly-braces, as their region boundaries are the file itself.
  

  Escaping Curly Brackets _

    If you need to use curly brackets in your text, you can escape the Urtext syntax by preceding the bracket with a backward slash; this will prevent them from being parsed: \ \

    To ignore syntax elements more globally, and/or to embed other syntaxes that use Urtext characters, such as JSON, PHP, and JavaScript, see | Escaping Sections of Text >oy5
@004  }  

  



@01j