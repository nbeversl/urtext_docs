{"1676549727": "@@ -358,25 +358,8 @@\n %22%0A%0A%7D\n-%0A%0A%7B Node Titles _\n %0A%7C n\n@@ -615,16 +615,33 @@\n       %3E%0A\n+%7B Node Titles _%0A%0A\n     By d\n", "1676547918": "Urtext Reference _\n\n{ Nodes _\n\n\n    Urtext's basic unit is a \"node\", which is a range or set of ranges of text within a file. A folder of nodes is a \"project\". A node is region, or set of regions, of a file, up to and including the entire file.  A file is itself a node, and nodes can contain other nodes. Think of a node being a \"linked note with metadata.\"\n\n}\n\n{ Node Titles _\n\n    By default, the full first non-whitespace line of any node is the node's title and unique identifier. This can be overridden using the \"title\" metadata key or by following the desired text with the underscore (`_`) character as used in this document. \n}\n\n\n{ Types of Nodes _\n\n\n     { File Nodes _\n     \n        The most basic node is a single file. It may or may not contain other nodes nested inside it.\n\n        To create a new file-level node: | - New Node: ctrl + shift + ; >. A new file is created and named automatically. It contains a single node title and (by default) a creation timestamp.  }\n\n\n    { Bullet Nodes  _\n\n        For nodes that can fit on a single line, such as items in a list, short phrases, word definitions, and so on, you can use a simplified node syntax. Begin the line with the caret symbol (^); the closing wrapper then becomes the next newline (the end of the same line). Like other nodes:\n\n\n        \u2022 require an id \n        \u2022 can have arbitrary other metadata \n        \u2022 become child nodes of their containing node. \n        }\n\n    { Bracket Nodes _ \n     \n\n        Nodes can be nested arbitrarily deep inside other nodes, whether the parent node is a file or another bracket node. For all purposes in Urtext, bracket nodes' identities are unique from their containing files, parent nodes, and child nodes.   \n\n        The syntax for bracket nodes is to wrap the content in curly braces:\n\n                { Example Bracket Node _ }\n\n\n        Create an bracket nodes with | - Insert Bracket Node, Minimal: ctrl + shift + Left-Bracket >. Inside the inserted double curly braces is a new node with an auto-generated ID.   \n\n        To wrap existing content into an bracket node, first select the content and use the same keypress.\n\n        When syntax highlighting is active, bracket node wrappers are tinted to showing nesting level:\n            \n            \n            PROBLEM - Insert Nested Brackets\n\n            A screenshot can be seen here: f>./files/node-nesting-example.png\n            \n\n        Note that every opening curly bracket must be closed in the same file. Every node requires an ID between its opening and closing brackets. Nodes at the file level (| File Nodes >) do not use curly-braces, as their region boundaries are the file itself.\n\n          Escaping Curly Brackets _\n\n            If you need to use curly brackets in your text, escape the Urtext syntax by preceding the bracket with a backward slash (`\\`); this will prevent them from being parsed.\n\n            To ignore syntax elements more globally, and/or to embed other syntaxes that use Urtext characters, such as JSON, PHP, and JavaScript, see | Escaping and Embedding >\n      }  \n\n\n    {   Duplicate Node Titles _ \n\n        If two nodes end up with the same title, only one will be assigned the title. Additional files containing nodes with the same title will show a warning message. See |  ?  >\n\n        { \n            To correct the problem, it is necessary to manually change the duplicate ID to a new one. To ensure the corrected node ID is unique, it is recommended to use | - Add New Node ID: ctrl + shift + i > for this (as described above), after the rest of the project is compiled.\n            \n            #needs_functional_work\n\n        }\n\n    }\n}\n\n{ Projects, Structure and Compiling _\n\n    A project is a collection of files in a folder containing Urtext nodes. An Urtext project is a single folder.\n\n    Urtext does not depend on organization of files at the filesystem level and has no subfolder organization scheme. All project files are kept in a single folder. Organization of files, file groups, and file relationships is done entirely within the system. This makes it easy to sync and use across devices and platforms where file and folder paths may not always resolve uniformly, and it avoids broken file paths from moved/renamed/reorganized files.\n\n    To make an new empty project, select \"Urtext : New Project\" from the Sublime Command Palette. Sublime will ask for a folder location and a new project will be created in the specified location.\n\n    Filenaming is arbitrary but can be automated. \n}\n\n{ Metadata  _\n\n\n    { Metadata Syntax _\n\n      Every node can have unlimited metadata. Metadata is assigned using double-colon-separated key/value(s) pairs, with the value(s) (to the right of the colon) containing an optional timestamp. Examples:\n\n            purpose::This node describes Metadata in Urtext <Thu., Dec. 15, 2022, 12:50 PM>\n            audience::Urtext user\n\n      Nodes can be searched and sorted by their metadata using | Dynamic Definitions >. Metadata entries \"remember\" their location, allowing them to double as contextual bookmarks. \n\n      Other than a few reserved key/value pairs, metadata is user-defined. Keys must be single words, though characters such as dash and underscore are allowed. Values may include spaces. Terminate metadata entries using either a new line or a semicolon. Using the semicolon option, several entries may be strung together on a single line:\n\n          one_key::some value; another_key::some_other_value <Thu., Sep. 10, 2020, 05:37 PM>;\n          \n      Note that a timestamp anywhere in the value will be indexed as the timestamp for the whole metadata entry. If more than on timestamp appears in an entry, only the first one is indexed. }\n      \n    { Timestamps _                                                                 \n\n      {   Timestamp Syntax _\n\n          Text between two angled brackets (`< >`) is parsed as a timestamp whenever the first character inside the brackets is not `!`, `-` or whitespace. Urtext utilizes the Python `dateutil` module to loosely parse dates in almost any format. For instance, all of the following are valid:\n\n                <Fri., Oct. 09, 2020, 09:59 AM>\n                <February 23, 1848>\n                <May 1946>\n                <1066>\n\n          Press | - Insert Timestamp: ctrl + shift + t > to insert the current date and time anywhere. The format of the resulting timestamp can be changed in | project_settings > using the |  timestamp_format > key.\n\n          Timestamps may also be used anywhere, without a keyname; \"inline\" timestamps that are not part of a keyed metadata entry are auto-assigned the system keyname `inline-timestamp`. Like all metadata, they remember their position and may function doubly as anchors/bookmarks. }\n\n      {   Tracking Node Dates and Times _\n\n          Reliance on the operating system's \"created\" or \"modified\" file date metadata is avoided, since these can be inadvertently overwritten during ordinary file system operations. Instead, new file-level nodes receive a \"timestamp\" metadata key by default when created.\n           The default format can be changed using the timestamp_format in | project_settings >. }\n        \n      {   Time Zones _\n\n          Time zones are not required. If no time zone is present, Coordinated Universal Time (UTC) is added by default for parsing/comparison purposes. To modify this default, set the timezone key in | project_settings >. }   \n\n      }\n\n    {  Case-sensitivity _\n\n        For comparison, filtering, and sorting purposes, metadata values are not case-sensitive. }\n\n     { Reserved Key : title _\n\n        There is only one reserved key is Urtext:\n        `title` overrides the node title, which is by default the full first non-whitespace line. \n\n        `_newest_timestamp`\n\n        `_oldest_timestamp`\n         \n      }\n\n      { Hash Key _\n\n          If you use one keyword a lot and want a shortcut to use the \"hashtag\" instead of the keyname, set the `hash_key` value in your project_settings to the keyname.\n          See | project_settings > \n\n      }\n\n      { Tag nodes and descendents _\n\n        The * character assigns metadata to childen and descendants of nodes:\n\n        To assign the metadata to all children (but not the node containing the metadata):\n        *key::value\n\n        To include also the node containing the metadata:\n        +*key::value\n\n        To assign the metadata to all descendants (but not the node containing the metadata):\n        **key::value\n\n        To include also the node containing the metadata:\n        +**key::value\n      }\n}\n\n\n{ Links and Pointers _\n\n    { Links _ \n\n        To make a link from one node to another, use the pipe and a space (`| `) followed immediately by a node title, followed by a space and the right angle bracket (` >`). Linking does not require a filename or any other information, only the node title. Any other surrounding text is ignored.\n\n        {  Sublime Text tools to help with linking _\n        \n            Two Sublime Command Palette commands can make linking quick and easy:\n         \n            Urtext : Link To ...\n                Links from the currently viewed node to another node which you can select in the selection panel. When you select a node in the quick panel, a link to that node will be inserted at the cursor.\n     \n            Urtext: Link From ...\n                Links TO the current node FROM another node. When you select this command, a link to the current node will be copied to the clipboard. You can then paste the reference into the node you open in the quick panel.\n        } \n    }\n\n    { Dynamic Titles _\n\n        Whenever the title of a node is edited/changed, Urtext will attempt to update all links to that node to the new title. In some cases, manually updating may be required. \n     }\n\n    { Following Urtext Links _ \n        \n        { Sublime\n        \n            Pressing | - Open Urtext Link:  ctrl + shift + / > on a line containing a link to open the node with the linked title. If the link is to an inline node, Sublime will scroll to and center its starting point. \n            }\n    \n    }\n\n    { Linking to Files and Internet Links _\n\n        { Link to Web/HTTP(S) _\n\n                HTTP(S) links are recognized automatically and will open in the default browser.    \n                Example: pressing | - Open Urtext Link:  ctrl + shift + / > on this line will open the link: http://github.com/nbeversl/urtext\n        }\n\n\n        { Link to Files _\n                \n                Links to files can be made by writing `f>`, followed immediately with a file path relative to the folder of the project:\n                Example: f>README.md\n        } \n    }\n}\n\n{ Dynamic Definitions _\n\n    Nodes with dynamically updated content are created using a Dynamic Definition. Dynamic Definitions are specified with double square brackets [[ ]]. Dynamic definitions can query, sort, filter, and format the output of nodes in a variety of ways, making them adaptable to many purposes. This section illustrates some example uses of dynamic nodes. It will be helpful to reference | Dynamic Definitions - Syntax and Parameters >.\n\n    Dynamic Definitions can be written anywhere; it is not necessary to store the definition in the same file to which it refers. (Note that they cannot, however, be stored in the node they target, since they would overwrite themselves.)\n\n    The key | - Insert Dynamic Definition and Node: ctrl + shift + Right-Bracket > creates a new dynamic definition in Sublime, auto-populated with a corresponding empty inline node. \n\n    You can also write a definition manually, providing the title of an existing node. For example, if you want the contents to replace an existing node, assign this key the value of that node's title. If you want it to populate new inline node, create that node and then copy/paste its title. Note that Dynamic Definitions do not create their target nodes automatically ; the target node must exist, or the definition will have no effect.   \n\n    | Dynamic Definitions - Syntax and Parameters >\n\n    }\n\n\n\n\n{ Traverse Mode  _\n\n\n    You can navigate a node tree or list of nodes by turning on Traverse mode (Shift-Ctrl-R). This will open another pane next to the one you are currently in. As you navigate the nodeview in the left side with the cursor or mouse, the selected node shows on the right. Use Sublime's Focus Group navigation keys, or the mouse, to switch between left and right panes.\n    \n    Toggle Traverse Mode off by pressing Shift-Ctrl-R again. The status bar at the bottom of the Sublime window indicates whether Traverse is on or off. \n\n    Note that if Traverse mode is off, you can also open a link manually (Shift-Ctrl-/) as normal. \n\n    This feature is not built into Urtext; it is a feature of the Sublime package only.\n\n    { Word Wrap in Traverse Mode _\n\n        Since Traverse Mode splits the window into two or more panes, it is suggested to set Word Wrap Column to \"Auto\" in Sublime Settings. This will cause the edited views to wrap correctly no matter the screen or window/pane size, as well as in Sublime's Distraction Free Mode.\n\n        Whenever Traverse Mode is enabled on a view, word wrap for that view is turned off altogether to prevent awkward wrapping of trees. It is restored when Traverse Mode is turned off.  }\n}\n\n{ Pulling and Popping Nodes _\n    \n    Bracketed nodes can be \"popped\" out to separate file-level nodes and pulled back in again, either to the same node or to another one. \n\n    To pop a node, position the cursor inside the node to pop and select \"Urtext : Pop Node\" from the command palette or press Shift-Ctrl-Super-(right-arrow). The node will be moved to a separate file and replaced with a link to itself.\n\n    To pull a node, make (or choose an existing) a link or pointer and position the cursor on it. Select \"Urtext : Pull Node\" from the command palette or press Shift-Ctrl-Super-(left-arrow).\n\n }\n\n\n{ Project Settings _\n\n    Below is a pointer to the `project_settings` node for this documentation project. In its metadata for this node you can specify settings for the project.\n\n    The `project_settings` node is optional. To create one, make a node and use metadata to give it the title `project_settings`, as this node has. (The other text content of the node does not matter.)\n\n    | project_settings >>\n\n} \n\n{ Exporting _\n\n    Urtext can export to plaintext, Markdown and HTML. Output can be written to a file or back into another node in the project. Exporting is dynamic; when changes are made to the source files, exports are immediately updated.\n\n\n    { Example : Fragment Exported to HTML _\n\n        The following Dynamic Definition is identical to the above, except it exports to HTML.   \n\n    }\n}\n\n{ Sublime Text Urtext Key Bindings  _\n\n\tBelow are the default key bindings for Sublime Urtext commands, separated into bracket nodes for display in this reference node. \n\n\t{ Navigation _\n\n        { - Open Urtext Link:  ctrl + shift + / }\n        { - Navigate Forward: ctrl + shift + . }\n        { - Navigate Backward: ctrl + shift + , }\n        { - Home Node: ctrl + shift + h }\n        { - Open Random Node: ctrl + shift + f }\n        { - Node Browser: ctrl + shift + e }\n        { - Node Browser, All Projects: ctrl + shift + * }\n        { - Node Browser, Forward Links: ctrl + shift + right }\n        { - Node Browser, Backlinks: ctrl + shift + left }\n        { - List Projects: ctrl + shift + o }\n        { - Keyword Browser: ctrl + shift + x }\n        { - Metadata Browser: ctrl + shift + m }\n        { - Browse Associated Nodes: ctrl + shift + space }\n\t\t\t\t\n\t } \n\n\t{ Content Insertion _\n\n        { - New Node: ctrl + shift + ; }\n        { - Insert Timestamp: ctrl + shift + t }\n        { - Insert Bracket Node with Timestamp:\tctrl + shift + 1 }\n        { - Insert Bracket Node Wrapper: ctrl + shift + 2 }\n        { - Insert Bracket Node, Minimal: ctrl + shift + Left-Bracket }\n        { - Insert Dynamic Definition and Node: ctrl + shift + Right-Bracket }\n        { - Insert Bullet Node: ctrl + shift + 6 }\n        { - Insert Link to Existing Node: ctrl + shift + l }\n        { - Insert Link to New Node: ctrl + shift + ' }\n        { - Quick Tag from Other: ctrl + shift + 0 }\n\t  }\n\n\t{ Copy Links _\n\n        { - Copy Link to Node: ctrl + shift + c }\n        { - Copy Link to Node With Project: ctrl + shift + super + c }\n\t  }\n\n\t{ Traverse Modes _\n\n        { - Toggle Traverse Broswer: ctrl + shift + r }\n        { - Toggle Traverse History: ctrl + shift + g }\n\t }\n}\n", "1676549703": "@@ -368,24 +368,283 @@\n de Titles _%0A\n+%7C new_file_node_format                                                                                                                                                                                                                                            %3E\n %0A    By defa\n", "1676549743": "@@ -359,267 +359,8 @@\n %0A%0A%7D%0A\n-%7C new_file_node_format                                                                                                                                                                                                                                            %3E\n %0A%7B N\n"}