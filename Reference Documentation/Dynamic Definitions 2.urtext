Dynamic Definitions _

Dynamic definitions are instructions for dynamically building nodes from display from the content of other nodes.

Dynamic definitions are wrapped with double left and right square brackets(`[[`,`]]`). There are no restrictions on spacing, indentation, newlines, or other arbitrary text or whitespace. The order of parameters within a definition is unimportant; they are evaluated as a group. Definitions can be written anywhere; it is not necessary to store a definition in the same file to which it refers.

The dynamic definition below is for documentation and does not actually do anything. It just lists every built-in directive along with an explanation.

[[ 	TARGET() 	Target node to dynamically populate with output.
	or >()		Accepts a node id orlink.

	INCLUDE()  	Nodes to include in output.
	or +()		Accepts one or more key/value pairs with operators and optional flag(s).
					
				Operators:

					`=` "equal to"
						Example: INCLUDE(key = value)	
						Includes all nodes with the given key containing the given value

					`?` "contains"
						Example: INCLUDE(_contents ? some text or content)
						Includes all nodes containing "some text or content" in their text contents.

					`*` "anything"
						Example: INCLUDE(index = *)
						Includes all nodes containing the key `index`

					Use a semicolon or newline to separate multiple parameters. Example:
					INCLUDE(index = *; kw = example)
					Includes all nodes with an index key and all nodes with the key "kw" equal to "example".

				Flags:

					Flags modify behavior. 

					`*` "all"
					Example: INCLUDE(*) or +(*)
					Includes all nodes in the project									

					`-blank`
					Includes all nodes that contain only whitespace as their content.	

				System keys:

					Urtext includes some built-in keys whose values are generated automatically. These may also be used in INCLUDE(): 

						`_contents` : Refers to a node's text contents. 

							Example: INCLUDE(_contents ? Western Civilization)
							Includes any node that contents the text "Western Civilization"
							(_contents comparisons are case-insensitive)
						
						`_links_to`			
							Example: INCLUDE(_links_to = "some node")
							Includes all nodes that contain links to node id "some node"

						`_links_from`
							Example: INCLUDE(_links_from = "some node")
							Includes all nodes to which "some node" links

	EXCLUDE()	Accepts all the same parameters as INCLUDE()
	or -()		Always evaluated after INCLUDE().
				Excludes the specified nodes from the result.

	SORT()		Sorts the results. 
				Entries can be keynames (include system-defined ones, see below)
				or flags, with multiple keys separated by semicolon or newline.

				SORT(

					[ key name ]		Sorts by the value of the given key. Default is alphabetical.
														
				  	-num or -n  		Sorts the results numerically if possible.
				  						The default sort is alphabetical.

					-timestamp or -t  	Sort by timestamp

				    -reverse or -r 		Reverses the sort order. Applicable to any of the above.

					)

					Example: SORT(title -reverse)

	LIMIT()		Limits the output to the specified number of results.
				Limit is applied after SORT().

				Example: LIMIT(30)
				Will only show 30 results of nodes with the specified INCLUDE() / EXCLUDE() parameters.

	The default output of a dynamic node, if no other is specified, is a list of (unique) nodes specified by the combination of INCLUDE() with EXCLUDE(). To see instead a tree representation of each node and its descendants, if any, use TREE():

	TREE()		Shows a hierarchical representation of all nodes descending from the included nodes.
				Accepts a single optional number paramenter providing a level of depth, such as TREE(5). 
				To show unlimited depth (until recursion), use the asterisk: TREE(*)

							

	By 
	SHOW()		Supplies a template to customize output of each result. 
				Accepts keynames, denoted with `$`, arbitrary text, and Unicode characters including \n, \r, \t.

				Words preceded by `$` are are evaluated as metadata keys, replaced in the output by their value(s).
				Note that key names themselves are not displayed in the output. Add keynames manually if you want them included.

					Example: SHOW(Author: $author, Date: $date\n)

				In addition to all user-defined metadata keys, the following tokens are included:

				SHOW(

					$title 
					Displays the node title, default or via the `title` meta key

					$link
					Displays a link to the node

					$date 
					Displays the node's date in the project's default timestamp format

					$meta
					Shorthand to show all metadata for every node, formatted as by "consolidate metadata"

					$contents:120
					Displays the contents of the node. Optional excerpt/length specifier after the colon
					)

	COLLECT()	Aggregates occurrences of metadata, including timestamps, with surrounding contents.
				Accepts key/value pairs and returns a seperate item for each occurence.

				Example: COLLECT(_inline_timestamp=*)
				Returns all occurrences of inline timestamps, with their surrounding contents.

	HEADER()	Adds additional arbitrary/freeform text to the beginning 
				of the output. This can include any syntax valid inside Urtext nodes, including metadata. Also includes unicode characters such as \n for new line.
	
	FOOTER()	Adds additional arbitrary/freeform text to the end of the output. 
				Same as for HEADER().

	]]